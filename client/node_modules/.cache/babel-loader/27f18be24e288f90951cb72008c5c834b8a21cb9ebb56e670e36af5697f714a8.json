{"ast":null,"code":"import _objectSpread from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'WaterTrackerPage',\n  data: function data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0],\n      // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0,\n      // Выпито воды в мл\n      waterNorm: 2000,\n      // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0,\n      // Процент выполнения дневной нормы\n      customAmount: 250,\n      // Пользовательский объем добавляемой воды\n      removeAmount: 100,\n      // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount: function remainingAmount() {\n      var remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory: function displayedHistory() {\n      var _this = this;\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        console.log('История пуста, создаем пустую историю');\n        return this.createEmptyHistory();\n      }\n      console.log('Формирование displayedHistory из:', this.waterHistory);\n\n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i = 1; _i <= 3; _i++) {\n        var _date = new Date(today);\n        _date.setDate(_date.getDate() + _i);\n        dates.push(_date.toISOString().split('T')[0]);\n      }\n      console.log('Даты для отображения:', dates);\n\n      // Преобразуем даты в объекты записей\n      var result = dates.map(function (date) {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === _this.selectedDate) {\n          var _entry = {\n            date: _this.selectedDate,\n            amount: _this.waterAmount,\n            percentCompleted: _this.waterAmount > 0 ? _this.percentCompleted : 5,\n            // Минимум 5% для пустых сосудов\n            isVirtual: false\n          };\n          console.log('Текущая дата:', date, 'Значения:', _entry);\n          return _entry;\n        }\n\n        // Для других дат ищем записи в истории\n        var historyEntry = _this.waterHistory.find(function (entry) {\n          return entry.date === date;\n        });\n        if (historyEntry) {\n          var amount = Number(historyEntry.amount || 0);\n          var percentCompleted = Number(historyEntry.percentCompleted || 0);\n          var _entry2 = {\n            date: historyEntry.date,\n            amount: amount,\n            percentCompleted: amount > 0 ? Math.max(percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n          console.log('Найдена запись для даты:', date, 'Значения:', _entry2);\n          return _entry2;\n        }\n\n        // Для дат без записей создаем пустые записи с минимальным отображением воды\n        var entry = {\n          date: date,\n          amount: 0,\n          percentCompleted: 5,\n          // Минимальное отображение воды (5%)\n          isVirtual: true\n        };\n        console.log('Пустая запись для даты:', date, 'Значения:', entry);\n        return entry;\n      });\n      console.log('Итоговая история для отображения:', result);\n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory: function createEmptyHistory() {\n      var _this2 = this;\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i2 = 1; _i2 <= 3; _i2++) {\n        var _date2 = new Date(today);\n        _date2.setDate(_date2.getDate() + _i2);\n        dates.push(_date2.toISOString().split('T')[0]);\n      }\n      return dates.map(function (date) {\n        return {\n          date: date,\n          amount: date === _this2.selectedDate ? _this2.waterAmount : 0,\n          percentCompleted: date === _this2.selectedDate ? Math.max(_this2.percentCompleted, 5) : 5,\n          // Минимум 5%\n          isVirtual: true\n        };\n      });\n    }\n  },\n  created: function created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n\n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    loadWaterStatus: function loadWaterStatus() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this3.loading = true;\n              _context.prev = 1;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context.next = 6;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n              return _context.abrupt(\"return\");\n            case 6:\n              _context.next = 8;\n              return axios.get('http://localhost:3000/api/water/status', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                params: {\n                  date: _this3.selectedDate\n                }\n              });\n            case 8:\n              response = _context.sent;\n              _this3.waterAmount = response.data.amount;\n              _this3.waterNorm = response.data.norm;\n              _this3.percentCompleted = response.data.percentCompleted;\n              _context.next = 18;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Ошибка при загрузке данных о потреблении воды:', _context.t0);\n              ElMessage.error('Не удалось загрузить данные о потреблении воды');\n            case 18:\n              _context.prev = 18;\n              _this3.loading = false;\n              return _context.finish(18);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 14, 18, 21]]);\n      }))();\n    },\n    // Загрузка истории потребления воды при смене даты и первоначально\n    loadWaterHistory: function loadWaterHistory() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 4:\n              _context2.next = 6;\n              return axios.get('http://localhost:3000/api/water/history', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 6:\n              response = _context2.sent;\n              console.log('Полученная история:', response.data.history);\n              if (!(!response.data.history || !Array.isArray(response.data.history))) {\n                _context2.next = 12;\n                break;\n              }\n              console.error('Получены некорректные данные истории:', response.data);\n              _this4.waterHistory = [];\n              return _context2.abrupt(\"return\");\n            case 12:\n              // Сортируем историю по дате (от ранних к поздним)\n              _this4.waterHistory = response.data.history.sort(function (a, b) {\n                return new Date(a.date) - new Date(b.date);\n              }).map(function (entry) {\n                console.log('Обработка записи истории:', entry);\n                return _objectSpread(_objectSpread({}, entry), {}, {\n                  // Гарантируем, что amount и percentCompleted имеют числовые значения\n                  amount: Number(entry.amount || 0),\n                  percentCompleted: Number(entry.percentCompleted || 0)\n                });\n              });\n              console.log('Обработанная история:', _this4.waterHistory);\n              _context2.next = 20;\n              break;\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Ошибка при загрузке истории потребления воды:', _context2.t0);\n              _this4.waterHistory = [];\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 16]]);\n      }))();\n    },\n    // Добавление записи о выпитой воде\n    addWater: function addWater(amount) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!amount || amount <= 0)) {\n                _context3.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды');\n              return _context3.abrupt(\"return\");\n            case 3:\n              _this5.loading = true;\n              _context3.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context3.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n              return _context3.abrupt(\"return\");\n            case 9:\n              _context3.next = 11;\n              return axios.post('http://localhost:3000/api/water/track', {\n                amount: amount,\n                date: _this5.selectedDate\n              }, {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 11:\n              response = _context3.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this5.waterAmount = waterData.amount;\n              _this5.waterNorm = waterData.norm;\n              _this5.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Добавляем текущую запись в историю сразу, не ожидая перезагрузки\n              _this5.updateHistoryWithCurrentDay();\n\n              // Обновляем историю потребления\n              _this5.loadWaterHistory();\n              _context3.next = 25;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('Ошибка при добавлении записи о воде:', _context3.t0);\n              ElMessage.error('Не удалось добавить запись о воде');\n            case 25:\n              _context3.prev = 25;\n              _this5.loading = false;\n              return _context3.finish(25);\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 21, 25, 28]]);\n      }))();\n    },\n    // Обновление истории текущим днем - вспомогательная функция\n    updateHistoryWithCurrentDay: function updateHistoryWithCurrentDay() {\n      var _this6 = this;\n      // Находим запись для текущего дня\n      var currentDayIndex = this.waterHistory.findIndex(function (entry) {\n        return entry.date === _this6.selectedDate;\n      });\n      var updatedEntry = {\n        date: this.selectedDate,\n        amount: this.waterAmount,\n        percentCompleted: this.percentCompleted,\n        norm: this.waterNorm\n      };\n      if (currentDayIndex >= 0) {\n        // Обновляем существующую запись\n        this.waterHistory.splice(currentDayIndex, 1, updatedEntry);\n      } else {\n        // Добавляем новую запись и сортируем\n        this.waterHistory.push(updatedEntry);\n        this.waterHistory.sort(function (a, b) {\n          return new Date(a.date) - new Date(b.date);\n        });\n      }\n      console.log('История после локального обновления:', this.waterHistory);\n    },\n    // Удаление записи о выпитой воде\n    removeWater: function removeWater(amount) {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!amount || amount <= 0 || amount > _this7.waterAmount)) {\n                _context4.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды для удаления');\n              return _context4.abrupt(\"return\");\n            case 3:\n              _this7.loading = true;\n              _context4.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n              return _context4.abrupt(\"return\");\n            case 9:\n              _context4.next = 11;\n              return axios[\"delete\"]('http://localhost:3000/api/water/remove', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                data: {\n                  amount: amount,\n                  date: _this7.selectedDate\n                }\n              });\n            case 11:\n              response = _context4.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this7.waterAmount = waterData.amount;\n              _this7.waterNorm = waterData.norm;\n              _this7.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0423\\u0434\\u0430\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Добавляем текущую запись в историю сразу, не ожидая перезагрузки\n              _this7.updateHistoryWithCurrentDay();\n\n              // Обновляем историю потребления\n              _this7.loadWaterHistory();\n              _context4.next = 25;\n              break;\n            case 21:\n              _context4.prev = 21;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('Ошибка при удалении записи о воде:', _context4.t0);\n              if (_context4.t0.response && _context4.t0.response.data) {\n                ElMessage.error(_context4.t0.response.data.message || 'Не удалось удалить запись о воде');\n              } else {\n                ElMessage.error('Не удалось удалить запись о воде');\n              }\n            case 25:\n              _context4.prev = 25;\n              _this7.loading = false;\n              return _context4.finish(25);\n            case 28:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 21, 25, 28]]);\n      }))();\n    },\n    // Изменение выбранной даты\n    changeDate: function changeDate(days) {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var date;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              date = new Date(_this8.selectedDate);\n              date.setDate(date.getDate() + days);\n              _this8.selectedDate = date.toISOString().split('T')[0];\n\n              // Сначала загружаем историю, затем статус текущего дня\n              _context5.next = 5;\n              return _this8.loadWaterHistory();\n            case 5:\n              _context5.next = 7;\n              return _this8.loadWaterStatus();\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // Форматирование дня недели для истории потребления\n    formatDay: function formatDay(dateStr) {\n      try {\n        var date = new Date(dateStr);\n        var days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        var dayName = days[date.getDay()];\n        var dayNum = date.getDate();\n        return \"\".concat(dayName, \" \").concat(dayNum);\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","name","data","selectedDate","Date","toISOString","split","waterAmount","waterNorm","percentCompleted","customAmount","removeAmount","loading","waterHistory","computed","remainingAmount","remaining","displayedHistory","_this","length","console","log","createEmptyHistory","dates","today","i","date","setDate","getDate","push","result","map","entry","amount","isVirtual","historyEntry","find","Number","Math","max","_this2","created","loadWaterStatus","loadWaterHistory","methods","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","wrap","_callee$","_context","prev","next","localStorage","getItem","warning","abrupt","get","headers","Authorization","concat","params","sent","norm","t0","error","finish","stop","_this4","_callee2","_callee2$","_context2","history","Array","isArray","sort","a","b","_objectSpread","addWater","_this5","_callee3","waterData","_callee3$","_context3","post","water","success","updateHistoryWithCurrentDay","_this6","currentDayIndex","findIndex","updatedEntry","splice","removeWater","_this7","_callee4","_callee4$","_context4","message","changeDate","days","_this8","_callee5","_callee5$","_context5","formatDay","dateStr","dayName","getDay","dayNum","e"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\WaterTracker.vue"],"sourcesContent":["<template>\n  <div class=\"water-tracker\">\n    <h1 class=\"text-2xl font-bold mb-6\" style=\"color: white;\">Трекер воды</h1>\n    \n    <!-- Карточка с отслеживанием воды -->\n    <div class=\"water-card\">\n      <div class=\"info-section\">\n        <div class=\"date-control\">\n          <el-button @click=\"changeDate(-1)\" icon=\"el-icon-arrow-left\" circle></el-button>\n          <el-date-picker\n            v-model=\"selectedDate\"\n            type=\"date\"\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            placeholder=\"Выберите дату\"\n            @change=\"loadWaterStatus\"\n          ></el-date-picker>\n          <el-button @click=\"changeDate(1)\" icon=\"el-icon-arrow-right\" circle></el-button>\n        </div>\n\n        <div class=\"water-info\">\n          <div class=\"water-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Выпито</div>\n              <div class=\"stat-value\">{{ waterAmount }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Норма</div>\n              <div class=\"stat-value\">{{ waterNorm }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Осталось</div>\n              <div class=\"stat-value\">{{ remainingAmount }} мл</div>\n            </div>\n          </div>\n          \n          <div class=\"water-progress-container\">\n            <div class=\"water-graphic\">\n              <div class=\"water-level\" :style=\"{ height: `${percentCompleted}%` }\">\n                <div class=\"water-waves\"></div>\n              </div>\n            </div>\n            <div class=\"progress-text\">{{ percentCompleted }}%</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"add-water-section\">\n        <h3 class=\"section-title\">Добавить воду</h3>\n        \n        <div class=\"quick-add-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-add-button\"\n            @click=\"addWater(amount)\"\n          >\n            +{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"customAmount\"\n            :min=\"1\"\n            :max=\"5000\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"primary\" @click=\"addWater(customAmount)\">\n            Добавить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <!-- Секция удаления воды -->\n      <div class=\"remove-water-section\" v-if=\"waterAmount > 0\">\n        <h3 class=\"section-title\">Удалить воду</h3>\n        \n        <div class=\"quick-remove-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-remove-button\"\n            @click=\"removeWater(amount)\"\n            :disabled=\"amount > waterAmount\"\n          >\n            -{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"removeAmount\"\n            :min=\"1\"\n            :max=\"waterAmount\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"danger\" @click=\"removeWater(removeAmount)\" :disabled=\"!removeAmount || removeAmount <= 0\">\n            Удалить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <div class=\"water-history-section\" v-if=\"waterHistory.length > 0\">\n        <h3 class=\"section-title\">История потребления воды</h3>\n        <div class=\"history-chart\">\n          <div\n            v-for=\"(entry, index) in displayedHistory\"\n            :key=\"index\"\n            class=\"history-bar\"\n            :class=\"{ 'current-day': entry.date === selectedDate }\"\n          >\n            <div class=\"history-day\">{{ formatDay(entry.date) }}</div>\n            <div \n              class=\"history-bar-container\"\n              :class=\"{ 'has-water': entry.amount > 0 }\"\n            >\n              <div \n                class=\"history-bar-fill\"\n                :style=\"{\n                  height: `${entry.percentCompleted || 5}%`\n                }\"\n              >\n                <div class=\"water-waves-small\" v-if=\"entry.amount > 0\"></div>\n              </div>\n            </div>\n            <div class=\"history-amount\">\n              {{ Math.round((entry.amount || 0) / 100) / 10 }}л\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"water-tips\">\n      <h3 class=\"tips-title\">Советы для достаточного потребления воды:</h3>\n      <ul class=\"tips-list\">\n        <li>Начинайте день со стакана воды</li>\n        <li>Установите регулярные напоминания</li>\n        <li>Носите с собой многоразовую бутылку</li>\n        <li>Пейте стакан воды за 30 минут до еды</li>\n        <li>Добавляйте в воду ломтики фруктов для вкуса</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'WaterTrackerPage',\n  data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0], // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0, // Выпито воды в мл\n      waterNorm: 2000, // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0, // Процент выполнения дневной нормы\n      customAmount: 250, // Пользовательский объем добавляемой воды\n      removeAmount: 100, // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount() {\n      const remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    \n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory() {\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        console.log('История пуста, создаем пустую историю');\n        return this.createEmptyHistory();\n      }\n      \n      console.log('Формирование displayedHistory из:', this.waterHistory);\n      \n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      console.log('Даты для отображения:', dates);\n      \n      // Преобразуем даты в объекты записей\n      const result = dates.map(date => {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === this.selectedDate) {\n          const entry = {\n            date: this.selectedDate,\n            amount: this.waterAmount,\n            percentCompleted: this.waterAmount > 0 ? this.percentCompleted : 5, // Минимум 5% для пустых сосудов\n            isVirtual: false\n          };\n          console.log('Текущая дата:', date, 'Значения:', entry);\n          return entry;\n        }\n        \n        // Для других дат ищем записи в истории\n        const historyEntry = this.waterHistory.find(entry => entry.date === date);\n        \n        if (historyEntry) {\n          const amount = Number(historyEntry.amount || 0);\n          const percentCompleted = Number(historyEntry.percentCompleted || 0);\n          \n          const entry = {\n            date: historyEntry.date,\n            amount: amount,\n            percentCompleted: amount > 0 ? Math.max(percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n          \n          console.log('Найдена запись для даты:', date, 'Значения:', entry);\n          return entry;\n        }\n        \n        // Для дат без записей создаем пустые записи с минимальным отображением воды\n        const entry = {\n          date,\n          amount: 0,\n          percentCompleted: 5, // Минимальное отображение воды (5%)\n          isVirtual: true\n        };\n        \n        console.log('Пустая запись для даты:', date, 'Значения:', entry);\n        return entry;\n      });\n      \n      console.log('Итоговая история для отображения:', result);\n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory() {\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      return dates.map(date => ({\n        date,\n        amount: date === this.selectedDate ? this.waterAmount : 0,\n        percentCompleted: date === this.selectedDate ? Math.max(this.percentCompleted, 5) : 5, // Минимум 5%\n        isVirtual: true\n      }));\n    }\n  },\n  created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n    \n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    async loadWaterStatus() {\n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n          return;\n        }\n        \n        const response = await axios.get('http://localhost:3000/api/water/status', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { date: this.selectedDate }\n        });\n        \n        this.waterAmount = response.data.amount;\n        this.waterNorm = response.data.norm;\n        this.percentCompleted = response.data.percentCompleted;\n      } catch (error) {\n        console.error('Ошибка при загрузке данных о потреблении воды:', error);\n        ElMessage.error('Не удалось загрузить данные о потреблении воды');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Загрузка истории потребления воды при смене даты и первоначально\n    async loadWaterHistory() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        \n        const response = await axios.get('http://localhost:3000/api/water/history', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        console.log('Полученная история:', response.data.history);\n        \n        if (!response.data.history || !Array.isArray(response.data.history)) {\n          console.error('Получены некорректные данные истории:', response.data);\n          this.waterHistory = [];\n          return;\n        }\n        \n        // Сортируем историю по дате (от ранних к поздним)\n        this.waterHistory = response.data.history.sort((a, b) => {\n          return new Date(a.date) - new Date(b.date);\n        }).map(entry => {\n          console.log('Обработка записи истории:', entry);\n          return {\n            ...entry,\n            // Гарантируем, что amount и percentCompleted имеют числовые значения\n            amount: Number(entry.amount || 0),\n            percentCompleted: Number(entry.percentCompleted || 0)\n          };\n        });\n        \n        console.log('Обработанная история:', this.waterHistory);\n      } catch (error) {\n        console.error('Ошибка при загрузке истории потребления воды:', error);\n        this.waterHistory = [];\n      }\n    },\n    \n    // Добавление записи о выпитой воде\n    async addWater(amount) {\n      if (!amount || amount <= 0) {\n        ElMessage.warning('Укажите корректное количество воды');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n          return;\n        }\n        \n        const response = await axios.post('http://localhost:3000/api/water/track', {\n          amount,\n          date: this.selectedDate\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Добавлено ${amount} мл воды`);\n        \n        // Добавляем текущую запись в историю сразу, не ожидая перезагрузки\n        this.updateHistoryWithCurrentDay();\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при добавлении записи о воде:', error);\n        ElMessage.error('Не удалось добавить запись о воде');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Обновление истории текущим днем - вспомогательная функция\n    updateHistoryWithCurrentDay() {\n      // Находим запись для текущего дня\n      const currentDayIndex = this.waterHistory.findIndex(\n        entry => entry.date === this.selectedDate\n      );\n      \n      const updatedEntry = {\n        date: this.selectedDate,\n        amount: this.waterAmount,\n        percentCompleted: this.percentCompleted,\n        norm: this.waterNorm\n      };\n      \n      if (currentDayIndex >= 0) {\n        // Обновляем существующую запись\n        this.waterHistory.splice(currentDayIndex, 1, updatedEntry);\n      } else {\n        // Добавляем новую запись и сортируем\n        this.waterHistory.push(updatedEntry);\n        this.waterHistory.sort((a, b) => new Date(a.date) - new Date(b.date));\n      }\n      \n      console.log('История после локального обновления:', this.waterHistory);\n    },\n    \n    // Удаление записи о выпитой воде\n    async removeWater(amount) {\n      if (!amount || amount <= 0 || amount > this.waterAmount) {\n        ElMessage.warning('Укажите корректное количество воды для удаления');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n          return;\n        }\n        \n        const response = await axios.delete('http://localhost:3000/api/water/remove', {\n          headers: { Authorization: `Bearer ${token}` },\n          data: {\n            amount,\n            date: this.selectedDate\n          }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Удалено ${amount} мл воды`);\n        \n        // Добавляем текущую запись в историю сразу, не ожидая перезагрузки\n        this.updateHistoryWithCurrentDay();\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при удалении записи о воде:', error);\n        if (error.response && error.response.data) {\n          ElMessage.error(error.response.data.message || 'Не удалось удалить запись о воде');\n        } else {\n          ElMessage.error('Не удалось удалить запись о воде');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Изменение выбранной даты\n    async changeDate(days) {\n      const date = new Date(this.selectedDate);\n      date.setDate(date.getDate() + days);\n      this.selectedDate = date.toISOString().split('T')[0];\n      \n      // Сначала загружаем историю, затем статус текущего дня\n      await this.loadWaterHistory();\n      await this.loadWaterStatus();\n    },\n    \n    // Форматирование дня недели для истории потребления\n    formatDay(dateStr) {\n      try {\n        const date = new Date(dateStr);\n        const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        const dayName = days[date.getDay()];\n        const dayNum = date.getDate();\n        \n        return `${dayName} ${dayNum}`;\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.water-tracker {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n/* Основная карточка трекера воды */\n.water-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* Секция с информацией о воде */\n.info-section {\n  margin-bottom: 2rem;\n}\n\n.date-control {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.water-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n}\n\n.water-stats {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 300px;\n}\n\n.stat-item {\n  text-align: center;\n  flex: 1;\n}\n\n.stat-label {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #333;\n}\n\n.stat-divider {\n  width: 1px;\n  background-color: #eee;\n  height: 50px;\n}\n\n.water-progress-container {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 200px;\n}\n\n.water-graphic {\n  width: 120px;\n  height: 200px;\n  border-radius: 60px;\n  border: 2px solid #3498db;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  position: relative;\n  margin-right: 1.5rem;\n}\n\n.water-level {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #3498db;\n  transition: height 0.5s;\n  overflow: hidden;\n}\n\n.water-waves {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  width: 100%;\n  height: 20px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimation 2s infinite linear;\n}\n\n@keyframes waveAnimation {\n  0% { \n    transform: translateX(-50%); \n  }\n  100% { \n    transform: translateX(50%); \n  }\n}\n\n.progress-text {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Секция добавления воды */\n.add-water-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.section-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.quick-add-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-add-button {\n  min-width: 100px;\n}\n\n.custom-amount {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/* История потребления воды */\n.water-history-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.history-chart {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 1rem;\n  height: 200px;\n  margin-top: 1.5rem;\n}\n\n.history-bar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50px;\n}\n\n.history-bar.current-day .history-day {\n  font-weight: bold;\n  color: #333;\n}\n\n.history-day {\n  font-size: 0.8rem;\n  color: #666;\n  margin-bottom: 0.5rem;\n}\n\n.history-bar-container {\n  width: 30px;\n  height: 120px;\n  background-color: #f0f0f0;\n  border-radius: 15px;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  box-sizing: border-box;\n  border: 1px solid #d4e6f1;\n}\n\n.history-bar-container.has-water {\n  background-color: #f0f0f0;\n}\n\n.history-bar.current-day .history-bar-container {\n  border: 2px solid #3498db;\n  box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);\n}\n\n.history-bar-fill {\n  position: absolute; \n  bottom: 0;\n  left: 0;\n  width: 100%;\n  background-color: #3498db;\n  transition: height 0.5s;\n  min-height: 1px;\n  overflow: hidden;\n}\n\n.water-waves-small {\n  position: absolute;\n  top: -5px;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimationSmall 2.5s infinite linear;\n  opacity: 0.7;\n}\n\n@keyframes waveAnimationSmall {\n  0% { \n    transform: translateX(-60%); \n  }\n  100% { \n    transform: translateX(60%); \n  }\n}\n\n.history-amount {\n  font-size: 0.8rem;\n  color: #333;\n  margin-top: 0.5rem;\n  font-weight: 500;\n}\n\n.history-bar.current-day .history-amount {\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Советы по потреблению воды */\n.water-tips {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 1.5rem;\n}\n\n.tips-title {\n  color:rgb(2, 78, 16);\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.tips-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 0.5rem;\n  padding-left: 1.5rem;\n}\n\n.tips-list li {\n  color:rgb(2, 78, 16);\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n  .water-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .stat-divider {\n    width: 80%;\n    height: 1px;\n  }\n  \n  .water-info {\n    flex-direction: column;\n  }\n  \n  .water-progress-container {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .water-graphic {\n    margin-right: 0;\n    margin-bottom: 1rem;\n  }\n  \n  .history-chart {\n    overflow-x: auto;\n    padding-bottom: 1rem;\n    justify-content: flex-start;\n  }\n}\n\n/* Стили для кнопок быстрого удаления */\n.quick-remove-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-remove-button {\n  min-width: 100px;\n}\n\n/* Стили для кнопок быстрого удаления (сделать их белыми, как кнопки добавления) */\n.quick-remove-button.el-button {\n  background-color: white;\n  color: #606266;\n  border-color: #DCDFE6;\n}\n\n.quick-remove-button.el-button:hover {\n  color: #409EFF;\n  border-color: #c6e2ff;\n  background-color: #ecf5ff;\n}\n\n.quick-remove-button.el-button:disabled {\n  color: #C0C4CC;\n  cursor: not-allowed;\n  background-color: #FFF;\n  border-color: #EBEEF5;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}