{"ast":null,"code":"import _objectSpread from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'WaterTrackerPage',\n  data: function data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0],\n      // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0,\n      // Выпито воды в мл\n      waterNorm: 2000,\n      // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0,\n      // Процент выполнения дневной нормы\n      customAmount: 250,\n      // Пользовательский объем добавляемой воды\n      removeAmount: 100,\n      // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount: function remainingAmount() {\n      var remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory: function displayedHistory() {\n      var _this = this;\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        return this.createEmptyHistory();\n      }\n\n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i = 1; _i <= 3; _i++) {\n        var _date = new Date(today);\n        _date.setDate(_date.getDate() + _i);\n        dates.push(_date.toISOString().split('T')[0]);\n      }\n\n      // Преобразуем даты в объекты записей\n      var result = dates.map(function (date) {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === _this.selectedDate) {\n          return {\n            date: _this.selectedDate,\n            amount: _this.waterAmount,\n            percentCompleted: _this.waterAmount > 0 ? _this.percentCompleted : 5,\n            // Минимум 5% для пустых сосудов\n            isVirtual: false\n          };\n        }\n\n        // Для других дат ищем записи в истории - проверяем все возможные форматы даты\n        var historyEntry = _this.waterHistory.find(function (entry) {\n          return entry.date === date;\n        });\n\n        // Если не нашли по точному совпадению, пробуем найти по дате без учета формата\n        if (!historyEntry) {\n          var targetDate = new Date(date).setHours(0, 0, 0, 0);\n          historyEntry = _this.waterHistory.find(function (entry) {\n            var entryDate = new Date(entry.date).setHours(0, 0, 0, 0);\n            return entryDate === targetDate;\n          });\n        }\n        if (historyEntry) {\n          // Для дат с историей возвращаем значения из истории\n          return {\n            date: date,\n            amount: historyEntry.amount || 0,\n            percentCompleted: historyEntry.amount > 0 ? Math.max(historyEntry.percentCompleted || Math.min(Math.round(historyEntry.amount / 2000 * 100), 100), 5) : 5,\n            isVirtual: false\n          };\n        }\n\n        // Для дат без записей создаем пустые записи\n        return {\n          date: date,\n          amount: 0,\n          percentCompleted: 5,\n          // Минимальное отображение воды (5%)\n          isVirtual: true\n        };\n      });\n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory: function createEmptyHistory() {\n      var _this2 = this;\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i2 = 1; _i2 <= 3; _i2++) {\n        var _date2 = new Date(today);\n        _date2.setDate(_date2.getDate() + _i2);\n        dates.push(_date2.toISOString().split('T')[0]);\n      }\n      return dates.map(function (date) {\n        return {\n          date: date,\n          amount: date === _this2.selectedDate ? _this2.waterAmount : 0,\n          percentCompleted: date === _this2.selectedDate ? Math.max(_this2.percentCompleted, 5) : 5,\n          // Минимум 5%\n          isVirtual: true\n        };\n      });\n    }\n  },\n  created: function created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n\n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  watch: {\n    // Наблюдаем за изменением выбранной даты\n    selectedDate: function selectedDate(newDate, oldDate) {\n      console.log(\"\\u0414\\u0430\\u0442\\u0430 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0430 \\u0441 \".concat(oldDate, \" \\u043D\\u0430 \").concat(newDate));\n      if (newDate !== oldDate) {\n        // При изменении даты обновляем запись в истории для предыдущей даты\n        this.updateCurrentDayInHistory();\n      }\n    }\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    loadWaterStatus: function loadWaterStatus() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this3.loading = true;\n              _context.prev = 1;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context.next = 6;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n              return _context.abrupt(\"return\");\n            case 6:\n              _context.next = 8;\n              return axios.get('http://localhost:3000/api/water/status', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                params: {\n                  date: _this3.selectedDate\n                }\n              });\n            case 8:\n              response = _context.sent;\n              _this3.waterAmount = response.data.amount;\n              _this3.waterNorm = response.data.norm;\n              _this3.percentCompleted = response.data.percentCompleted;\n\n              // Обновляем запись в истории для текущей даты, если она уже существует\n              _this3.updateCurrentDayInHistory();\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Ошибка при загрузке данных о потреблении воды:', _context.t0);\n              ElMessage.error('Не удалось загрузить данные о потреблении воды');\n            case 19:\n              _context.prev = 19;\n              _this3.loading = false;\n              return _context.finish(19);\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 15, 19, 22]]);\n      }))();\n    },\n    // Обновляем запись в истории для текущей даты\n    updateCurrentDayInHistory: function updateCurrentDayInHistory() {\n      var _this4 = this;\n      if (!this.waterHistory || this.waterHistory.length === 0) return;\n      var currentDayIndex = this.waterHistory.findIndex(function (entry) {\n        return entry.date === _this4.selectedDate;\n      });\n      if (currentDayIndex !== -1) {\n        // Обновляем существующую запись\n        this.waterHistory[currentDayIndex] = _objectSpread(_objectSpread({}, this.waterHistory[currentDayIndex]), {}, {\n          amount: this.waterAmount,\n          percentCompleted: this.percentCompleted\n        });\n      } else {\n        // Добавляем новую запись для текущего дня\n        this.waterHistory.push({\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          percentCompleted: this.percentCompleted\n        });\n\n        // Сортируем историю по датам\n        this.waterHistory.sort(function (a, b) {\n          return new Date(a.date) - new Date(b.date);\n        });\n      }\n    },\n    // Загрузка истории потребления воды при смене даты и первоначально\n    loadWaterHistory: function loadWaterHistory() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token, response, historyData;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 4:\n              _context2.next = 6;\n              return axios.get('http://localhost:3000/api/water/history', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 6:\n              response = _context2.sent;\n              console.log('Получена история из API:', response.data);\n\n              // Убедимся, что у нас есть корректный массив истории\n              historyData = Array.isArray(response.data.history) ? response.data.history : response.data.data || []; // Преобразуем и сортируем историю по дате (от ранних к поздним)\n              _this5.waterHistory = historyData.filter(function (entry) {\n                return entry && entry.date;\n              }) // Убедимся, что у записи есть дата\n              .map(function (entry) {\n                return {\n                  date: entry.date,\n                  amount: entry.amount || 0,\n                  percentCompleted: entry.percentCompleted || (entry.amount > 0 ? Math.min(Math.round(entry.amount / 2000 * 100), 100) : 0)\n                };\n              }).sort(function (a, b) {\n                return new Date(a.date) - new Date(b.date);\n              });\n              console.log('Сохраненная история в компоненте:', _this5.waterHistory);\n\n              // Обновляем текущий день в истории\n              _this5.updateCurrentDayInHistory();\n              _context2.next = 17;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Ошибка при загрузке истории потребления воды:', _context2.t0);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 14]]);\n      }))();\n    },\n    // Добавление записи о выпитой воде\n    addWater: function addWater(amount) {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!amount || amount <= 0)) {\n                _context3.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды');\n              return _context3.abrupt(\"return\");\n            case 3:\n              _this6.loading = true;\n              _context3.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context3.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n              return _context3.abrupt(\"return\");\n            case 9:\n              _context3.next = 11;\n              return axios.post('http://localhost:3000/api/water/track', {\n                amount: amount,\n                date: _this6.selectedDate\n              }, {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 11:\n              response = _context3.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this6.waterAmount = waterData.amount;\n              _this6.waterNorm = waterData.norm;\n              _this6.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Обновляем историю потребления\n              _this6.loadWaterHistory();\n              _context3.next = 24;\n              break;\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('Ошибка при добавлении записи о воде:', _context3.t0);\n              ElMessage.error('Не удалось добавить запись о воде');\n            case 24:\n              _context3.prev = 24;\n              _this6.loading = false;\n              return _context3.finish(24);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 20, 24, 27]]);\n      }))();\n    },\n    // Удаление записи о выпитой воде\n    removeWater: function removeWater(amount) {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!amount || amount <= 0 || amount > _this7.waterAmount)) {\n                _context4.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды для удаления');\n              return _context4.abrupt(\"return\");\n            case 3:\n              _this7.loading = true;\n              _context4.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n              return _context4.abrupt(\"return\");\n            case 9:\n              _context4.next = 11;\n              return axios[\"delete\"]('http://localhost:3000/api/water/remove', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                data: {\n                  amount: amount,\n                  date: _this7.selectedDate\n                }\n              });\n            case 11:\n              response = _context4.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this7.waterAmount = waterData.amount;\n              _this7.waterNorm = waterData.norm;\n              _this7.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0423\\u0434\\u0430\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Обновляем историю потребления\n              _this7.loadWaterHistory();\n              _context4.next = 24;\n              break;\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('Ошибка при удалении записи о воде:', _context4.t0);\n              if (_context4.t0.response && _context4.t0.response.data) {\n                ElMessage.error(_context4.t0.response.data.message || 'Не удалось удалить запись о воде');\n              } else {\n                ElMessage.error('Не удалось удалить запись о воде');\n              }\n            case 24:\n              _context4.prev = 24;\n              _this7.loading = false;\n              return _context4.finish(24);\n            case 27:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 20, 24, 27]]);\n      }))();\n    },\n    // Изменение выбранной даты\n    changeDate: function changeDate(days) {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var date;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              // Сначала сохраняем данные для текущей даты\n              _this8.updateCurrentDayInHistory();\n\n              // Затем меняем дату\n              date = new Date(_this8.selectedDate);\n              date.setDate(date.getDate() + days);\n              _this8.selectedDate = date.toISOString().split('T')[0];\n\n              // Загружаем данные для новой даты\n              _context5.next = 6;\n              return _this8.loadWaterStatus();\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // Форматирование дня недели для истории потребления\n    formatDay: function formatDay(dateStr) {\n      try {\n        var date = new Date(dateStr);\n        var days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        var dayName = days[date.getDay()];\n        var dayNum = date.getDate();\n        return \"\".concat(dayName, \" \").concat(dayNum);\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","name","data","selectedDate","Date","toISOString","split","waterAmount","waterNorm","percentCompleted","customAmount","removeAmount","loading","waterHistory","computed","remainingAmount","remaining","displayedHistory","_this","length","createEmptyHistory","dates","today","i","date","setDate","getDate","push","result","map","amount","isVirtual","historyEntry","find","entry","targetDate","setHours","entryDate","Math","max","min","round","_this2","created","loadWaterStatus","loadWaterHistory","watch","newDate","oldDate","console","log","concat","updateCurrentDayInHistory","methods","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","wrap","_callee$","_context","prev","next","localStorage","getItem","warning","abrupt","get","headers","Authorization","params","sent","norm","t0","error","finish","stop","_this4","currentDayIndex","findIndex","_objectSpread","sort","a","b","_this5","_callee2","historyData","_callee2$","_context2","Array","isArray","history","filter","addWater","_this6","_callee3","waterData","_callee3$","_context3","post","water","success","removeWater","_this7","_callee4","_callee4$","_context4","message","changeDate","days","_this8","_callee5","_callee5$","_context5","formatDay","dateStr","dayName","getDay","dayNum","e"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\WaterTracker.vue"],"sourcesContent":["<template>\n  <div class=\"water-tracker\">\n    <h1 class=\"text-2xl font-bold mb-6\" style=\"color: white;\">Трекер воды</h1>\n    \n    <!-- Карточка с отслеживанием воды -->\n    <div class=\"water-card\">\n      <div class=\"info-section\">\n        <div class=\"date-control\">\n          <el-button @click=\"changeDate(-1)\" icon=\"el-icon-arrow-left\" circle></el-button>\n          <el-date-picker\n            v-model=\"selectedDate\"\n            type=\"date\"\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            placeholder=\"Выберите дату\"\n            @change=\"loadWaterStatus\"\n          ></el-date-picker>\n          <el-button @click=\"changeDate(1)\" icon=\"el-icon-arrow-right\" circle></el-button>\n        </div>\n\n        <div class=\"water-info\">\n          <div class=\"water-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Выпито</div>\n              <div class=\"stat-value\">{{ waterAmount }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Норма</div>\n              <div class=\"stat-value\">{{ waterNorm }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Осталось</div>\n              <div class=\"stat-value\">{{ remainingAmount }} мл</div>\n            </div>\n          </div>\n          \n          <div class=\"water-progress-container\">\n            <div class=\"water-graphic\">\n              <div class=\"water-level\" :style=\"{ height: `${percentCompleted}%` }\">\n                <div class=\"water-waves\"></div>\n              </div>\n            </div>\n            <div class=\"progress-text\">{{ percentCompleted }}%</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"add-water-section\">\n        <h3 class=\"section-title\">Добавить воду</h3>\n        \n        <div class=\"quick-add-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-add-button\"\n            @click=\"addWater(amount)\"\n          >\n            +{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"customAmount\"\n            :min=\"1\"\n            :max=\"5000\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"primary\" @click=\"addWater(customAmount)\">\n            Добавить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <!-- Секция удаления воды -->\n      <div class=\"remove-water-section\" v-if=\"waterAmount > 0\">\n        <h3 class=\"section-title\">Удалить воду</h3>\n        \n        <div class=\"quick-remove-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-remove-button\"\n            @click=\"removeWater(amount)\"\n            :disabled=\"amount > waterAmount\"\n          >\n            -{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"removeAmount\"\n            :min=\"1\"\n            :max=\"waterAmount\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"danger\" @click=\"removeWater(removeAmount)\" :disabled=\"!removeAmount || removeAmount <= 0\">\n            Удалить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <div class=\"water-history-section\" v-if=\"waterHistory.length > 0\">\n        <h3 class=\"section-title\">История потребления воды</h3>\n        <div class=\"history-chart\">\n          <div\n            v-for=\"(entry, index) in displayedHistory\"\n            :key=\"index\"\n            class=\"history-bar\"\n            :class=\"{ 'current-day': entry.date === selectedDate }\"\n          >\n            <div class=\"history-day\">{{ formatDay(entry.date) }}</div>\n            <div class=\"history-bar-container\">\n              <div \n                class=\"history-bar-fill\"\n                :style=\"{\n                  height: (entry.percentCompleted || 0) + '%'\n                }\"\n              >\n                <div class=\"water-waves-small\" v-if=\"entry.percentCompleted > 0\"></div>\n              </div>\n            </div>\n            <div class=\"history-amount\">{{ Math.round((entry.amount || 0) / 100) / 10 }}л</div>\n          </div>\n        </div>\n\n        <!-- Временный блок для отладки -->\n        <div v-if=\"false\" class=\"debug-info\">\n          <h4 class=\"section-title\">Отладочная информация (данные истории)</h4>\n          <div v-for=\"(entry, index) in waterHistory\" :key=\"'debug-' + index\" style=\"margin-bottom: 8px; font-size: 12px;\">\n            <strong>Дата:</strong> {{ entry.date }} |\n            <strong>Количество:</strong> {{ entry.amount }} мл |\n            <strong>Процент:</strong> {{ entry.percentCompleted }}%\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"water-tips\">\n      <h3 class=\"tips-title\">Советы для достаточного потребления воды:</h3>\n      <ul class=\"tips-list\">\n        <li>Начинайте день со стакана воды</li>\n        <li>Установите регулярные напоминания</li>\n        <li>Носите с собой многоразовую бутылку</li>\n        <li>Пейте стакан воды за 30 минут до еды</li>\n        <li>Добавляйте в воду ломтики фруктов для вкуса</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'WaterTrackerPage',\n  data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0], // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0, // Выпито воды в мл\n      waterNorm: 2000, // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0, // Процент выполнения дневной нормы\n      customAmount: 250, // Пользовательский объем добавляемой воды\n      removeAmount: 100, // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount() {\n      const remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    \n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory() {\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        return this.createEmptyHistory();\n      }\n      \n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Преобразуем даты в объекты записей\n      const result = dates.map(date => {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === this.selectedDate) {\n          return {\n            date: this.selectedDate,\n            amount: this.waterAmount,\n            percentCompleted: this.waterAmount > 0 ? this.percentCompleted : 5, // Минимум 5% для пустых сосудов\n            isVirtual: false\n          };\n        }\n        \n        // Для других дат ищем записи в истории - проверяем все возможные форматы даты\n        let historyEntry = this.waterHistory.find(entry => entry.date === date);\n        \n        // Если не нашли по точному совпадению, пробуем найти по дате без учета формата\n        if (!historyEntry) {\n          const targetDate = new Date(date).setHours(0, 0, 0, 0);\n          historyEntry = this.waterHistory.find(entry => {\n            const entryDate = new Date(entry.date).setHours(0, 0, 0, 0);\n            return entryDate === targetDate;\n          });\n        }\n        \n        if (historyEntry) {\n          // Для дат с историей возвращаем значения из истории\n          return {\n            date,\n            amount: historyEntry.amount || 0,\n            percentCompleted: historyEntry.amount > 0 \n              ? Math.max(historyEntry.percentCompleted || Math.min(Math.round((historyEntry.amount / 2000) * 100), 100), 5) \n              : 5,\n            isVirtual: false\n          };\n        }\n        \n        // Для дат без записей создаем пустые записи\n        return {\n          date,\n          amount: 0,\n          percentCompleted: 5, // Минимальное отображение воды (5%)\n          isVirtual: true\n        };\n      });\n      \n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory() {\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      return dates.map(date => ({\n        date,\n        amount: date === this.selectedDate ? this.waterAmount : 0,\n        percentCompleted: date === this.selectedDate ? Math.max(this.percentCompleted, 5) : 5, // Минимум 5%\n        isVirtual: true\n      }));\n    }\n  },\n  created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n    \n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  watch: {\n    // Наблюдаем за изменением выбранной даты\n    selectedDate(newDate, oldDate) {\n      console.log(`Дата изменена с ${oldDate} на ${newDate}`);\n      if (newDate !== oldDate) {\n        // При изменении даты обновляем запись в истории для предыдущей даты\n        this.updateCurrentDayInHistory();\n      }\n    }\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    async loadWaterStatus() {\n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n          return;\n        }\n        \n        const response = await axios.get('http://localhost:3000/api/water/status', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { date: this.selectedDate }\n        });\n        \n        this.waterAmount = response.data.amount;\n        this.waterNorm = response.data.norm;\n        this.percentCompleted = response.data.percentCompleted;\n        \n        // Обновляем запись в истории для текущей даты, если она уже существует\n        this.updateCurrentDayInHistory();\n      } catch (error) {\n        console.error('Ошибка при загрузке данных о потреблении воды:', error);\n        ElMessage.error('Не удалось загрузить данные о потреблении воды');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Обновляем запись в истории для текущей даты\n    updateCurrentDayInHistory() {\n      if (!this.waterHistory || this.waterHistory.length === 0) return;\n      \n      const currentDayIndex = this.waterHistory.findIndex(entry => entry.date === this.selectedDate);\n      \n      if (currentDayIndex !== -1) {\n        // Обновляем существующую запись\n        this.waterHistory[currentDayIndex] = {\n          ...this.waterHistory[currentDayIndex],\n          amount: this.waterAmount,\n          percentCompleted: this.percentCompleted\n        };\n      } else {\n        // Добавляем новую запись для текущего дня\n        this.waterHistory.push({\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          percentCompleted: this.percentCompleted\n        });\n        \n        // Сортируем историю по датам\n        this.waterHistory.sort((a, b) => new Date(a.date) - new Date(b.date));\n      }\n    },\n    \n    // Загрузка истории потребления воды при смене даты и первоначально\n    async loadWaterHistory() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        \n        const response = await axios.get('http://localhost:3000/api/water/history', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        console.log('Получена история из API:', response.data);\n        \n        // Убедимся, что у нас есть корректный массив истории\n        const historyData = Array.isArray(response.data.history) \n          ? response.data.history \n          : (response.data.data || []);\n        \n        // Преобразуем и сортируем историю по дате (от ранних к поздним)\n        this.waterHistory = historyData\n          .filter(entry => entry && entry.date) // Убедимся, что у записи есть дата\n          .map(entry => ({\n            date: entry.date,\n            amount: entry.amount || 0,\n            percentCompleted: entry.percentCompleted || (entry.amount > 0 ? Math.min(Math.round((entry.amount / 2000) * 100), 100) : 0)\n          }))\n          .sort((a, b) => new Date(a.date) - new Date(b.date));\n        \n        console.log('Сохраненная история в компоненте:', this.waterHistory);\n        \n        // Обновляем текущий день в истории\n        this.updateCurrentDayInHistory();\n      } catch (error) {\n        console.error('Ошибка при загрузке истории потребления воды:', error);\n      }\n    },\n    \n    // Добавление записи о выпитой воде\n    async addWater(amount) {\n      if (!amount || amount <= 0) {\n        ElMessage.warning('Укажите корректное количество воды');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n          return;\n        }\n        \n        const response = await axios.post('http://localhost:3000/api/water/track', {\n          amount,\n          date: this.selectedDate\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Добавлено ${amount} мл воды`);\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при добавлении записи о воде:', error);\n        ElMessage.error('Не удалось добавить запись о воде');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Удаление записи о выпитой воде\n    async removeWater(amount) {\n      if (!amount || amount <= 0 || amount > this.waterAmount) {\n        ElMessage.warning('Укажите корректное количество воды для удаления');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n          return;\n        }\n        \n        const response = await axios.delete('http://localhost:3000/api/water/remove', {\n          headers: { Authorization: `Bearer ${token}` },\n          data: {\n            amount,\n            date: this.selectedDate\n          }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Удалено ${amount} мл воды`);\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при удалении записи о воде:', error);\n        if (error.response && error.response.data) {\n          ElMessage.error(error.response.data.message || 'Не удалось удалить запись о воде');\n        } else {\n          ElMessage.error('Не удалось удалить запись о воде');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Изменение выбранной даты\n    async changeDate(days) {\n      // Сначала сохраняем данные для текущей даты\n      this.updateCurrentDayInHistory();\n      \n      // Затем меняем дату\n      const date = new Date(this.selectedDate);\n      date.setDate(date.getDate() + days);\n      this.selectedDate = date.toISOString().split('T')[0];\n      \n      // Загружаем данные для новой даты\n      await this.loadWaterStatus();\n    },\n    \n    // Форматирование дня недели для истории потребления\n    formatDay(dateStr) {\n      try {\n        const date = new Date(dateStr);\n        const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        const dayName = days[date.getDay()];\n        const dayNum = date.getDate();\n        \n        return `${dayName} ${dayNum}`;\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.water-tracker {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n/* Основная карточка трекера воды */\n.water-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* Секция с информацией о воде */\n.info-section {\n  margin-bottom: 2rem;\n}\n\n.date-control {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.water-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n}\n\n.water-stats {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 300px;\n}\n\n.stat-item {\n  text-align: center;\n  flex: 1;\n}\n\n.stat-label {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #333;\n}\n\n.stat-divider {\n  width: 1px;\n  background-color: #eee;\n  height: 50px;\n}\n\n.water-progress-container {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 200px;\n}\n\n.water-graphic {\n  width: 120px;\n  height: 200px;\n  border-radius: 60px;\n  border: 2px solid #3498db;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  position: relative;\n  margin-right: 1.5rem;\n}\n\n.water-level {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #3498db;\n  transition: height 0.5s;\n  overflow: hidden;\n}\n\n.water-waves {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  width: 100%;\n  height: 20px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimation 2s infinite linear;\n}\n\n@keyframes waveAnimation {\n  0% { \n    transform: translateX(-50%); \n  }\n  100% { \n    transform: translateX(50%); \n  }\n}\n\n.progress-text {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Секция добавления воды */\n.add-water-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.section-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.quick-add-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-add-button {\n  min-width: 100px;\n}\n\n.custom-amount {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/* История потребления воды */\n.water-history-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.history-chart {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 1rem;\n  height: 200px;\n  margin-top: 1.5rem;\n}\n\n.history-bar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50px;\n}\n\n.history-bar.current-day .history-day {\n  font-weight: bold;\n  color: #333;\n}\n\n.history-day {\n  font-size: 0.8rem;\n  color: #666;\n  margin-bottom: 0.5rem;\n}\n\n.history-bar-container {\n  width: 30px;\n  height: 120px;\n  background-color: #f0f0f0;\n  border-radius: 15px;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  box-sizing: border-box;\n  border: 1px solid #d4e6f1;\n}\n\n.history-bar.current-day .history-bar-container {\n  border: 2px solid #3498db;\n  box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);\n}\n\n.history-bar-fill {\n  position: absolute; \n  bottom: 0;\n  left: 0;\n  width: 100%;\n  background-color: #3498db !important; /* Принудительно применяем синий цвет */\n  transition: height 0.5s;\n  min-height: 1px;\n  overflow: hidden;\n  z-index: 1; /* Гарантируем, что заполнение будет поверх фона */\n}\n\n.water-waves-small {\n  position: absolute;\n  top: -5px;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimationSmall 2.5s infinite linear;\n  opacity: 0.7;\n}\n\n@keyframes waveAnimationSmall {\n  0% { \n    transform: translateX(-60%); \n  }\n  100% { \n    transform: translateX(60%); \n  }\n}\n\n.history-amount {\n  font-size: 0.8rem;\n  color: #333;\n  margin-top: 0.5rem;\n  font-weight: 500;\n}\n\n.history-bar.current-day .history-amount {\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Советы по потреблению воды */\n.water-tips {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 1.5rem;\n}\n\n.tips-title {\n  color:rgb(2, 78, 16);\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.tips-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 0.5rem;\n  padding-left: 1.5rem;\n}\n\n.tips-list li {\n  color:rgb(2, 78, 16);\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n  .water-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .stat-divider {\n    width: 80%;\n    height: 1px;\n  }\n  \n  .water-info {\n    flex-direction: column;\n  }\n  \n  .water-progress-container {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .water-graphic {\n    margin-right: 0;\n    margin-bottom: 1rem;\n  }\n  \n  .history-chart {\n    overflow-x: auto;\n    padding-bottom: 1rem;\n    justify-content: flex-start;\n  }\n}\n\n/* Стили для кнопок быстрого удаления */\n.quick-remove-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-remove-button {\n  min-width: 100px;\n}\n\n/* Стили для кнопок быстрого удаления (сделать их белыми, как кнопки добавления) */\n.quick-remove-button.el-button {\n  background-color: white;\n  color: #606266;\n  border-color: #DCDFE6;\n}\n\n.quick-remove-button.el-button:hover {\n  color: #409EFF;\n  border-color: #c6e2ff;\n  background-color: #ecf5ff;\n}\n\n.quick-remove-button.el-button:disabled {\n  color: #C0C4CC;\n  cursor: not-allowed;\n  background-color: #FFF;\n  border-color: #EBEEF5;\n}\n</style> "],"mappings":";;;;;;;;;;;;;;;;;;AA6JA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,cAAc;AAExC,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE;MACtDC,WAAW,EAAE,CAAC;MAAE;MAChBC,SAAS,EAAE,IAAI;MAAE;MACjBC,gBAAgB,EAAE,CAAC;MAAE;MACrBC,YAAY,EAAE,GAAG;MAAE;MACnBC,YAAY,EAAE,GAAG;MAAE;MACnBC,OAAO,EAAE,KAAK;MACdC,YAAY,EAAE,EAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAe,WAAfA,eAAeA,CAAA,EAAG;MAChB,IAAMC,SAAQ,GAAI,IAAI,CAACR,SAAQ,GAAI,IAAI,CAACD,WAAW;MACnD,OAAOS,SAAQ,GAAI,IAAIA,SAAQ,GAAI,CAAC;IACtC,CAAC;IAED;IACAC,gBAAgB,WAAhBA,gBAAgBA,CAAA,EAAG;MAAA,IAAAC,KAAA;MACjB,IAAI,CAAC,IAAI,CAACL,YAAW,IAAK,IAAI,CAACA,YAAY,CAACM,MAAK,KAAM,CAAC,EAAE;QACxD,OAAO,IAAI,CAACC,kBAAkB,CAAC,CAAC;MAClC;;MAEA;MACA,IAAMC,KAAI,GAAI,EAAE;MAChB,IAAMC,KAAI,GAAI,IAAIlB,IAAI,CAAC,IAAI,CAACD,YAAY,CAAC;;MAEzC;MACA,KAAK,IAAIoB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAMC,IAAG,GAAI,IAAIpB,IAAI,CAACkB,KAAK,CAAC;QAC5BE,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC,IAAIH,CAAC,CAAC;QAChCF,KAAK,CAACM,IAAI,CAACH,IAAI,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9C;;MAEA;MACAe,KAAK,CAACM,IAAI,CAAC,IAAI,CAACxB,YAAY,CAAC;;MAE7B;MACA,KAAK,IAAIoB,EAAA,GAAI,CAAC,EAAEA,EAAA,IAAK,CAAC,EAAEA,EAAC,EAAE,EAAE;QAC3B,IAAMC,KAAG,GAAI,IAAIpB,IAAI,CAACkB,KAAK,CAAC;QAC5BE,KAAI,CAACC,OAAO,CAACD,KAAI,CAACE,OAAO,CAAC,IAAIH,EAAC,CAAC;QAChCF,KAAK,CAACM,IAAI,CAACH,KAAI,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9C;;MAEA;MACA,IAAMsB,MAAK,GAAIP,KAAK,CAACQ,GAAG,CAAC,UAAAL,IAAG,EAAK;QAC/B;QACA,IAAIA,IAAG,KAAMN,KAAI,CAACf,YAAY,EAAE;UAC9B,OAAO;YACLqB,IAAI,EAAEN,KAAI,CAACf,YAAY;YACvB2B,MAAM,EAAEZ,KAAI,CAACX,WAAW;YACxBE,gBAAgB,EAAES,KAAI,CAACX,WAAU,GAAI,IAAIW,KAAI,CAACT,gBAAe,GAAI,CAAC;YAAE;YACpEsB,SAAS,EAAE;UACb,CAAC;QACH;;QAEA;QACA,IAAIC,YAAW,GAAId,KAAI,CAACL,YAAY,CAACoB,IAAI,CAAC,UAAAC,KAAI;UAAA,OAAKA,KAAK,CAACV,IAAG,KAAMA,IAAI;QAAA,EAAC;;QAEvE;QACA,IAAI,CAACQ,YAAY,EAAE;UACjB,IAAMG,UAAS,GAAI,IAAI/B,IAAI,CAACoB,IAAI,CAAC,CAACY,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACtDJ,YAAW,GAAId,KAAI,CAACL,YAAY,CAACoB,IAAI,CAAC,UAAAC,KAAI,EAAK;YAC7C,IAAMG,SAAQ,GAAI,IAAIjC,IAAI,CAAC8B,KAAK,CAACV,IAAI,CAAC,CAACY,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAC3D,OAAOC,SAAQ,KAAMF,UAAU;UACjC,CAAC,CAAC;QACJ;QAEA,IAAIH,YAAY,EAAE;UAChB;UACA,OAAO;YACLR,IAAI,EAAJA,IAAI;YACJM,MAAM,EAAEE,YAAY,CAACF,MAAK,IAAK,CAAC;YAChCrB,gBAAgB,EAAEuB,YAAY,CAACF,MAAK,GAAI,IACpCQ,IAAI,CAACC,GAAG,CAACP,YAAY,CAACvB,gBAAe,IAAK6B,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,KAAK,CAAET,YAAY,CAACF,MAAK,GAAI,IAAI,GAAI,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAC1G,CAAC;YACLC,SAAS,EAAE;UACb,CAAC;QACH;;QAEA;QACA,OAAO;UACLP,IAAI,EAAJA,IAAI;UACJM,MAAM,EAAE,CAAC;UACTrB,gBAAgB,EAAE,CAAC;UAAE;UACrBsB,SAAS,EAAE;QACb,CAAC;MACH,CAAC,CAAC;MAEF,OAAOH,MAAM;IACf,CAAC;IACD;IACAR,kBAAkB,WAAlBA,kBAAkBA,CAAA,EAAG;MAAA,IAAAsB,MAAA;MACnB,IAAMrB,KAAI,GAAI,EAAE;MAChB,IAAMC,KAAI,GAAI,IAAIlB,IAAI,CAAC,IAAI,CAACD,YAAY,CAAC;;MAEzC;MACA,KAAK,IAAIoB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAMC,IAAG,GAAI,IAAIpB,IAAI,CAACkB,KAAK,CAAC;QAC5BE,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC,IAAIH,CAAC,CAAC;QAChCF,KAAK,CAACM,IAAI,CAACH,IAAI,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9C;;MAEA;MACAe,KAAK,CAACM,IAAI,CAAC,IAAI,CAACxB,YAAY,CAAC;;MAE7B;MACA,KAAK,IAAIoB,GAAA,GAAI,CAAC,EAAEA,GAAA,IAAK,CAAC,EAAEA,GAAC,EAAE,EAAE;QAC3B,IAAMC,MAAG,GAAI,IAAIpB,IAAI,CAACkB,KAAK,CAAC;QAC5BE,MAAI,CAACC,OAAO,CAACD,MAAI,CAACE,OAAO,CAAC,IAAIH,GAAC,CAAC;QAChCF,KAAK,CAACM,IAAI,CAACH,MAAI,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9C;MAEA,OAAOe,KAAK,CAACQ,GAAG,CAAC,UAAAL,IAAG;QAAA,OAAM;UACxBA,IAAI,EAAJA,IAAI;UACJM,MAAM,EAAEN,IAAG,KAAMkB,MAAI,CAACvC,YAAW,GAAIuC,MAAI,CAACnC,WAAU,GAAI,CAAC;UACzDE,gBAAgB,EAAEe,IAAG,KAAMkB,MAAI,CAACvC,YAAW,GAAImC,IAAI,CAACC,GAAG,CAACG,MAAI,CAACjC,gBAAgB,EAAE,CAAC,IAAI,CAAC;UAAE;UACvFsB,SAAS,EAAE;QACb,CAAC;MAAA,CAAC,CAAC;IACL;EACF,CAAC;EACDY,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,eAAe,CAAC,CAAC;;IAEtB;IACA,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB,CAAC;EACDC,KAAK,EAAE;IACL;IACA3C,YAAY,WAAZA,YAAYA,CAAC4C,OAAO,EAAEC,OAAO,EAAE;MAC7BC,OAAO,CAACC,GAAG,qFAAAC,MAAA,CAAoBH,OAAO,oBAAAG,MAAA,CAAOJ,OAAO,CAAE,CAAC;MACvD,IAAIA,OAAM,KAAMC,OAAO,EAAE;QACvB;QACA,IAAI,CAACI,yBAAyB,CAAC,CAAC;MAClC;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACMT,eAAe,WAAfA,eAAeA,CAAA,EAAG;MAAA,IAAAU,MAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,KAAA,EAAAC,QAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACtBX,MAAI,CAAC1C,OAAM,GAAI,IAAI;cAAAmD,QAAA,CAAAC,IAAA;cAEXL,KAAI,GAAIO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cAAA,IACtCR,KAAK;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACRjE,SAAS,CAACoE,OAAO,CAAC,sDAAsD,CAAC;cAAA,OAAAL,QAAA,CAAAM,MAAA;YAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA,OAIpDlE,KAAK,CAACuE,GAAG,CAAC,wCAAwC,EAAE;gBACzEC,OAAO,EAAE;kBAAEC,aAAa,YAAArB,MAAA,CAAYQ,KAAK;gBAAG,CAAC;gBAC7Cc,MAAM,EAAE;kBAAEjD,IAAI,EAAE8B,MAAI,CAACnD;gBAAa;cACpC,CAAC,CAAC;YAAA;cAHIyD,QAAO,GAAAG,QAAA,CAAAW,IAAA;cAKbpB,MAAI,CAAC/C,WAAU,GAAIqD,QAAQ,CAAC1D,IAAI,CAAC4B,MAAM;cACvCwB,MAAI,CAAC9C,SAAQ,GAAIoD,QAAQ,CAAC1D,IAAI,CAACyE,IAAI;cACnCrB,MAAI,CAAC7C,gBAAe,GAAImD,QAAQ,CAAC1D,IAAI,CAACO,gBAAgB;;cAEtD;cACA6C,MAAI,CAACF,yBAAyB,CAAC,CAAC;cAAAW,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAa,EAAA,GAAAb,QAAA;cAEhCd,OAAO,CAAC4B,KAAK,CAAC,gDAAgD,EAAAd,QAAA,CAAAa,EAAO,CAAC;cACtE5E,SAAS,CAAC6E,KAAK,CAAC,gDAAgD,CAAC;YAAA;cAAAd,QAAA,CAAAC,IAAA;cAEjEV,MAAI,CAAC1C,OAAM,GAAI,KAAK;cAAA,OAAAmD,QAAA,CAAAe,MAAA;YAAA;YAAA;cAAA,OAAAf,QAAA,CAAAgB,IAAA;UAAA;QAAA,GAAArB,OAAA;MAAA;IAExB,CAAC;IAED;IACAN,yBAAyB,WAAzBA,yBAAyBA,CAAA,EAAG;MAAA,IAAA4B,MAAA;MAC1B,IAAI,CAAC,IAAI,CAACnE,YAAW,IAAK,IAAI,CAACA,YAAY,CAACM,MAAK,KAAM,CAAC,EAAE;MAE1D,IAAM8D,eAAc,GAAI,IAAI,CAACpE,YAAY,CAACqE,SAAS,CAAC,UAAAhD,KAAI;QAAA,OAAKA,KAAK,CAACV,IAAG,KAAMwD,MAAI,CAAC7E,YAAY;MAAA,EAAC;MAE9F,IAAI8E,eAAc,KAAM,CAAC,CAAC,EAAE;QAC1B;QACA,IAAI,CAACpE,YAAY,CAACoE,eAAe,IAAAE,aAAA,CAAAA,aAAA,KAC5B,IAAI,CAACtE,YAAY,CAACoE,eAAe,CAAC;UACrCnD,MAAM,EAAE,IAAI,CAACvB,WAAW;UACxBE,gBAAgB,EAAE,IAAI,CAACA;QAAe,EACvC;MACH,OAAO;QACL;QACA,IAAI,CAACI,YAAY,CAACc,IAAI,CAAC;UACrBH,IAAI,EAAE,IAAI,CAACrB,YAAY;UACvB2B,MAAM,EAAE,IAAI,CAACvB,WAAW;UACxBE,gBAAgB,EAAE,IAAI,CAACA;QACzB,CAAC,CAAC;;QAEF;QACA,IAAI,CAACI,YAAY,CAACuE,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;UAAA,OAAK,IAAIlF,IAAI,CAACiF,CAAC,CAAC7D,IAAI,IAAI,IAAIpB,IAAI,CAACkF,CAAC,CAAC9D,IAAI,CAAC;QAAA,EAAC;MACvE;IACF,CAAC;IAED;IACMqB,gBAAgB,WAAhBA,gBAAgBA,CAAA,EAAG;MAAA,IAAA0C,MAAA;MAAA,OAAAhC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAA+B,SAAA;QAAA,IAAA7B,KAAA,EAAAC,QAAA,EAAA6B,WAAA;QAAA,OAAAjC,mBAAA,GAAAK,IAAA,UAAA6B,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA3B,IAAA,GAAA2B,SAAA,CAAA1B,IAAA;YAAA;cAAA0B,SAAA,CAAA3B,IAAA;cAEfL,KAAI,GAAIO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cAAA,IACtCR,KAAK;gBAAAgC,SAAA,CAAA1B,IAAA;gBAAA;cAAA;cAAA,OAAA0B,SAAA,CAAAtB,MAAA;YAAA;cAAAsB,SAAA,CAAA1B,IAAA;cAAA,OAEalE,KAAK,CAACuE,GAAG,CAAC,yCAAyC,EAAE;gBAC1EC,OAAO,EAAE;kBAAEC,aAAa,YAAArB,MAAA,CAAYQ,KAAK;gBAAG;cAC9C,CAAC,CAAC;YAAA;cAFIC,QAAO,GAAA+B,SAAA,CAAAjB,IAAA;cAIbzB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,QAAQ,CAAC1D,IAAI,CAAC;;cAEtD;cACMuF,WAAU,GAAIG,KAAK,CAACC,OAAO,CAACjC,QAAQ,CAAC1D,IAAI,CAAC4F,OAAO,IACnDlC,QAAQ,CAAC1D,IAAI,CAAC4F,OAAM,GACnBlC,QAAQ,CAAC1D,IAAI,CAACA,IAAG,IAAK,EAAG,EAE9B;cACAqF,MAAI,CAAC1E,YAAW,GAAI4E,WAAU,CAC3BM,MAAM,CAAC,UAAA7D,KAAI;gBAAA,OAAKA,KAAI,IAAKA,KAAK,CAACV,IAAI;cAAA,GAAE;cAAA,CACrCK,GAAG,CAAC,UAAAK,KAAI;gBAAA,OAAM;kBACbV,IAAI,EAAEU,KAAK,CAACV,IAAI;kBAChBM,MAAM,EAAEI,KAAK,CAACJ,MAAK,IAAK,CAAC;kBACzBrB,gBAAgB,EAAEyB,KAAK,CAACzB,gBAAe,KAAMyB,KAAK,CAACJ,MAAK,GAAI,IAAIQ,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,KAAK,CAAEP,KAAK,CAACJ,MAAK,GAAI,IAAI,GAAI,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC;gBAC5H,CAAC;cAAA,CAAC,EACDsD,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;gBAAA,OAAK,IAAIlF,IAAI,CAACiF,CAAC,CAAC7D,IAAI,IAAI,IAAIpB,IAAI,CAACkF,CAAC,CAAC9D,IAAI,CAAC;cAAA,EAAC;cAEtDyB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEqC,MAAI,CAAC1E,YAAY,CAAC;;cAEnE;cACA0E,MAAI,CAACnC,yBAAyB,CAAC,CAAC;cAAAuC,SAAA,CAAA1B,IAAA;cAAA;YAAA;cAAA0B,SAAA,CAAA3B,IAAA;cAAA2B,SAAA,CAAAf,EAAA,GAAAe,SAAA;cAEhC1C,OAAO,CAAC4B,KAAK,CAAC,+CAA+C,EAAAc,SAAA,CAAAf,EAAO,CAAC;YAAA;YAAA;cAAA,OAAAe,SAAA,CAAAZ,IAAA;UAAA;QAAA,GAAAS,QAAA;MAAA;IAEzE,CAAC;IAED;IACMQ,QAAQ,WAARA,QAAQA,CAAClE,MAAM,EAAE;MAAA,IAAAmE,MAAA;MAAA,OAAA1C,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAyC,SAAA;QAAA,IAAAvC,KAAA,EAAAC,QAAA,EAAAuC,SAAA;QAAA,OAAA3C,mBAAA,GAAAK,IAAA,UAAAuC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAArC,IAAA,GAAAqC,SAAA,CAAApC,IAAA;YAAA;cAAA,MACjB,CAACnC,MAAK,IAAKA,MAAK,IAAK,CAAC;gBAAAuE,SAAA,CAAApC,IAAA;gBAAA;cAAA;cACxBjE,SAAS,CAACoE,OAAO,CAAC,oCAAoC,CAAC;cAAA,OAAAiC,SAAA,CAAAhC,MAAA;YAAA;cAIzD4B,MAAI,CAACrF,OAAM,GAAI,IAAI;cAAAyF,SAAA,CAAArC,IAAA;cAEXL,KAAI,GAAIO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cAAA,IACtCR,KAAK;gBAAA0C,SAAA,CAAApC,IAAA;gBAAA;cAAA;cACRjE,SAAS,CAACoE,OAAO,CAAC,wDAAwD,CAAC;cAAA,OAAAiC,SAAA,CAAAhC,MAAA;YAAA;cAAAgC,SAAA,CAAApC,IAAA;cAAA,OAItDlE,KAAK,CAACuG,IAAI,CAAC,uCAAuC,EAAE;gBACzExE,MAAM,EAANA,MAAM;gBACNN,IAAI,EAAEyE,MAAI,CAAC9F;cACb,CAAC,EAAE;gBACDoE,OAAO,EAAE;kBAAEC,aAAa,YAAArB,MAAA,CAAYQ,KAAK;gBAAG;cAC9C,CAAC,CAAC;YAAA;cALIC,QAAO,GAAAyC,SAAA,CAAA3B,IAAA;cAOb;cACMyB,SAAQ,GAAIvC,QAAQ,CAAC1D,IAAI,CAACqG,KAAK;cACrCN,MAAI,CAAC1F,WAAU,GAAI4F,SAAS,CAACrE,MAAM;cACnCmE,MAAI,CAACzF,SAAQ,GAAI2F,SAAS,CAACxB,IAAI;cAC/BsB,MAAI,CAACxF,gBAAe,GAAI0F,SAAS,CAAC1F,gBAAgB;;cAElD;cACAT,SAAS,CAACwG,OAAO,2DAAArD,MAAA,CAAcrB,MAAM,2CAAU,CAAC;;cAEhD;cACAmE,MAAI,CAACpD,gBAAgB,CAAC,CAAC;cAAAwD,SAAA,CAAApC,IAAA;cAAA;YAAA;cAAAoC,SAAA,CAAArC,IAAA;cAAAqC,SAAA,CAAAzB,EAAA,GAAAyB,SAAA;cAEvBpD,OAAO,CAAC4B,KAAK,CAAC,sCAAsC,EAAAwB,SAAA,CAAAzB,EAAO,CAAC;cAC5D5E,SAAS,CAAC6E,KAAK,CAAC,mCAAmC,CAAC;YAAA;cAAAwB,SAAA,CAAArC,IAAA;cAEpDiC,MAAI,CAACrF,OAAM,GAAI,KAAK;cAAA,OAAAyF,SAAA,CAAAvB,MAAA;YAAA;YAAA;cAAA,OAAAuB,SAAA,CAAAtB,IAAA;UAAA;QAAA,GAAAmB,QAAA;MAAA;IAExB,CAAC;IAED;IACMO,WAAW,WAAXA,WAAWA,CAAC3E,MAAM,EAAE;MAAA,IAAA4E,MAAA;MAAA,OAAAnD,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAkD,SAAA;QAAA,IAAAhD,KAAA,EAAAC,QAAA,EAAAuC,SAAA;QAAA,OAAA3C,mBAAA,GAAAK,IAAA,UAAA+C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;YAAA;cAAA,MACpB,CAACnC,MAAK,IAAKA,MAAK,IAAK,KAAKA,MAAK,GAAI4E,MAAI,CAACnG,WAAW;gBAAAsG,SAAA,CAAA5C,IAAA;gBAAA;cAAA;cACrDjE,SAAS,CAACoE,OAAO,CAAC,iDAAiD,CAAC;cAAA,OAAAyC,SAAA,CAAAxC,MAAA;YAAA;cAItEqC,MAAI,CAAC9F,OAAM,GAAI,IAAI;cAAAiG,SAAA,CAAA7C,IAAA;cAEXL,KAAI,GAAIO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cAAA,IACtCR,KAAK;gBAAAkD,SAAA,CAAA5C,IAAA;gBAAA;cAAA;cACRjE,SAAS,CAACoE,OAAO,CAAC,sDAAsD,CAAC;cAAA,OAAAyC,SAAA,CAAAxC,MAAA;YAAA;cAAAwC,SAAA,CAAA5C,IAAA;cAAA,OAIpDlE,KAAK,UAAO,CAAC,wCAAwC,EAAE;gBAC5EwE,OAAO,EAAE;kBAAEC,aAAa,YAAArB,MAAA,CAAYQ,KAAK;gBAAG,CAAC;gBAC7CzD,IAAI,EAAE;kBACJ4B,MAAM,EAANA,MAAM;kBACNN,IAAI,EAAEkF,MAAI,CAACvG;gBACb;cACF,CAAC,CAAC;YAAA;cANIyD,QAAO,GAAAiD,SAAA,CAAAnC,IAAA;cAQb;cACMyB,SAAQ,GAAIvC,QAAQ,CAAC1D,IAAI,CAACqG,KAAK;cACrCG,MAAI,CAACnG,WAAU,GAAI4F,SAAS,CAACrE,MAAM;cACnC4E,MAAI,CAAClG,SAAQ,GAAI2F,SAAS,CAACxB,IAAI;cAC/B+B,MAAI,CAACjG,gBAAe,GAAI0F,SAAS,CAAC1F,gBAAgB;;cAElD;cACAT,SAAS,CAACwG,OAAO,+CAAArD,MAAA,CAAYrB,MAAM,2CAAU,CAAC;;cAE9C;cACA4E,MAAI,CAAC7D,gBAAgB,CAAC,CAAC;cAAAgE,SAAA,CAAA5C,IAAA;cAAA;YAAA;cAAA4C,SAAA,CAAA7C,IAAA;cAAA6C,SAAA,CAAAjC,EAAA,GAAAiC,SAAA;cAEvB5D,OAAO,CAAC4B,KAAK,CAAC,oCAAoC,EAAAgC,SAAA,CAAAjC,EAAO,CAAC;cAC1D,IAAIiC,SAAA,CAAAjC,EAAA,CAAMhB,QAAO,IAAKiD,SAAA,CAAAjC,EAAA,CAAMhB,QAAQ,CAAC1D,IAAI,EAAE;gBACzCF,SAAS,CAAC6E,KAAK,CAACgC,SAAA,CAAAjC,EAAA,CAAMhB,QAAQ,CAAC1D,IAAI,CAAC4G,OAAM,IAAK,kCAAkC,CAAC;cACpF,OAAO;gBACL9G,SAAS,CAAC6E,KAAK,CAAC,kCAAkC,CAAC;cACrD;YAAA;cAAAgC,SAAA,CAAA7C,IAAA;cAEA0C,MAAI,CAAC9F,OAAM,GAAI,KAAK;cAAA,OAAAiG,SAAA,CAAA/B,MAAA;YAAA;YAAA;cAAA,OAAA+B,SAAA,CAAA9B,IAAA;UAAA;QAAA,GAAA4B,QAAA;MAAA;IAExB,CAAC;IAED;IACMI,UAAU,WAAVA,UAAUA,CAACC,IAAI,EAAE;MAAA,IAAAC,MAAA;MAAA,OAAA1D,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAyD,SAAA;QAAA,IAAA1F,IAAA;QAAA,OAAAgC,mBAAA,GAAAK,IAAA,UAAAsD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApD,IAAA,GAAAoD,SAAA,CAAAnD,IAAA;YAAA;cACrB;cACAgD,MAAI,CAAC7D,yBAAyB,CAAC,CAAC;;cAEhC;cACM5B,IAAG,GAAI,IAAIpB,IAAI,CAAC6G,MAAI,CAAC9G,YAAY,CAAC;cACxCqB,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC,IAAIsF,IAAI,CAAC;cACnCC,MAAI,CAAC9G,YAAW,GAAIqB,IAAI,CAACnB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;cAEpD;cAAA8G,SAAA,CAAAnD,IAAA;cAAA,OACMgD,MAAI,CAACrE,eAAe,CAAC,CAAC;YAAA;YAAA;cAAA,OAAAwE,SAAA,CAAArC,IAAA;UAAA;QAAA,GAAAmC,QAAA;MAAA;IAC9B,CAAC;IAED;IACAG,SAAS,WAATA,SAASA,CAACC,OAAO,EAAE;MACjB,IAAI;QACF,IAAM9F,IAAG,GAAI,IAAIpB,IAAI,CAACkH,OAAO,CAAC;QAC9B,IAAMN,IAAG,GAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QACvD,IAAMO,OAAM,GAAIP,IAAI,CAACxF,IAAI,CAACgG,MAAM,CAAC,CAAC,CAAC;QACnC,IAAMC,MAAK,GAAIjG,IAAI,CAACE,OAAO,CAAC,CAAC;QAE7B,UAAAyB,MAAA,CAAUoE,OAAO,OAAApE,MAAA,CAAIsE,MAAM;MAC7B,EAAE,OAAOC,CAAC,EAAE;QACVzE,OAAO,CAAC4B,KAAK,CAAC,6BAA6B,EAAE6C,CAAC,CAAC;QAC/C,OAAOJ,OAAO;MAChB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}