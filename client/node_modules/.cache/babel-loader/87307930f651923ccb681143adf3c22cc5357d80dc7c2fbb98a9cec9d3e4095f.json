{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"food-diary\"\n};\nvar _hoisted_2 = {\n  \"class\": \"search-container mb-8\"\n};\nvar _hoisted_3 = {\n  \"class\": \"search-form\"\n};\nvar _hoisted_4 = {\n  \"class\": \"product-suggestion\"\n};\nvar _hoisted_5 = {\n  \"class\": \"product-name\"\n};\nvar _hoisted_6 = {\n  \"class\": \"product-info text-sm text-gray-600\"\n};\nvar _hoisted_7 = {\n  \"class\": \"mt-2 text-right\"\n};\nvar _hoisted_8 = {\n  key: 0,\n  \"class\": \"selected-products\"\n};\nvar _hoisted_9 = {\n  \"class\": \"nutrition-summary mt-6 p-4 bg-gray-50 rounded-lg\"\n};\nvar _hoisted_10 = {\n  \"class\": \"grid grid-cols-4 gap-4\"\n};\nvar _hoisted_11 = {\n  \"class\": \"nutrition-item\"\n};\nvar _hoisted_12 = {\n  \"class\": \"value\"\n};\nvar _hoisted_13 = {\n  \"class\": \"nutrition-item\"\n};\nvar _hoisted_14 = {\n  \"class\": \"value\"\n};\nvar _hoisted_15 = {\n  \"class\": \"nutrition-item\"\n};\nvar _hoisted_16 = {\n  \"class\": \"value\"\n};\nvar _hoisted_17 = {\n  \"class\": \"nutrition-item\"\n};\nvar _hoisted_18 = {\n  \"class\": \"value\"\n};\nvar _hoisted_19 = {\n  \"class\": \"grid grid-cols-3 gap-4\"\n};\nvar _hoisted_20 = {\n  \"class\": \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_table_column = _resolveComponent(\"el-table-column\");\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_table = _resolveComponent(\"el-table\");\n  var _component_el_empty = _resolveComponent(\"el-empty\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_input_number = _resolveComponent(\"el-input-number\");\n  var _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[22] || (_cache[22] = _createElementVNode(\"h1\", {\n    \"class\": \"text-2xl font-bold mb-6\"\n  }, \"Журнал питания\", -1 /* HOISTED */)), _createCommentVNode(\" Форма поиска продуктов \"), _createElementVNode(\"div\", _hoisted_2, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n    \"class\": \"text-xl font-semibold mb-4\"\n  }, \"Добавить продукт\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_autocomplete, {\n    modelValue: $data.searchQuery,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.searchQuery = $event;\n    }),\n    \"fetch-suggestions\": $options.searchProducts,\n    placeholder: \"Введите название продукта\",\n    \"class\": \"w-full\",\n    \"trigger-on-focus\": true,\n    onSelect: $options.handleProductSelect\n  }, {\n    \"default\": _withCtx(function (_ref) {\n      var item = _ref.item;\n      return [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, _toDisplayString(item.calories) + \" ккал | Б: \" + _toDisplayString(item.proteins) + \"г | Ж: \" + _toDisplayString(item.fats) + \"г | У: \" + _toDisplayString(item.carbs) + \"г \", 1 /* TEXT */)])];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"fetch-suggestions\", \"onSelect\"]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.openAddProductModal\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[9] || (_cache[9] = [_createTextVNode(\" Добавить новый продукт \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])])])]), _createCommentVNode(\" Выбранные продукты \"), $data.selectedProducts.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_cache[17] || (_cache[17] = _createElementVNode(\"h2\", {\n    \"class\": \"text-xl font-semibold mb-4\"\n  }, \"Выбранные продукты\", -1 /* HOISTED */)), _createVNode(_component_el_table, {\n    data: $data.selectedProducts,\n    style: {\n      \"width\": \"100%\"\n    }\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_table_column, {\n        prop: \"name\",\n        label: \"Название\",\n        width: \"180\"\n      }), _createVNode(_component_el_table_column, {\n        label: \"Вес (г)\",\n        width: \"120\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createVNode(_component_el_input, {\n            modelValue: scope.row.quantity,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return scope.row.quantity = $event;\n            },\n            modelModifiers: {\n              number: true\n            },\n            type: \"number\",\n            size: \"small\",\n            min: \"1\",\n            max: \"5000\",\n            onChange: function onChange($event) {\n              return $options.updateNutrition(scope.$index);\n            },\n            \"class\": \"weight-input\"\n          }, null, 8 /* PROPS */, [\"modelValue\", \"onUpdate:modelValue\", \"onChange\"])];\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"Калории\",\n        width: \"100\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createTextVNode(_toDisplayString(scope.row.calculatedCalories.toFixed(1)), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"Белки (г)\",\n        width: \"100\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createTextVNode(_toDisplayString(scope.row.calculatedProteins.toFixed(1)), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"Жиры (г)\",\n        width: \"100\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createTextVNode(_toDisplayString(scope.row.calculatedFats.toFixed(1)), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"Углеводы (г)\",\n        width: \"100\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createTextVNode(_toDisplayString(scope.row.calculatedCarbs.toFixed(1)), 1 /* TEXT */)];\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        fixed: \"right\",\n        label: \"Действия\",\n        width: \"120\"\n      }, {\n        \"default\": _withCtx(function (scope) {\n          return [_createVNode(_component_el_button, {\n            type: \"danger\",\n            size: \"small\",\n            onClick: function onClick($event) {\n              return $options.removeProduct(scope.$index);\n            }\n          }, {\n            \"default\": _withCtx(function () {\n              return _cache[11] || (_cache[11] = [_createTextVNode(\" Удалить \")]);\n            }),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"]), _createCommentVNode(\" Итоги КБЖУ \"), _createElementVNode(\"div\", _hoisted_9, [_cache[16] || (_cache[16] = _createElementVNode(\"h3\", {\n    \"class\": \"text-lg font-semibold mb-2\"\n  }, \"Итого за сегодня:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    \"class\": \"label\"\n  }, \"Калории:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_12, _toDisplayString($options.getTotalNutrition('calories')) + \" ккал\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_13, [_cache[13] || (_cache[13] = _createElementVNode(\"div\", {\n    \"class\": \"label\"\n  }, \"Белки:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, _toDisplayString($options.getTotalNutrition('proteins')) + \" г\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_15, [_cache[14] || (_cache[14] = _createElementVNode(\"div\", {\n    \"class\": \"label\"\n  }, \"Жиры:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_16, _toDisplayString($options.getTotalNutrition('fats')) + \" г\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_17, [_cache[15] || (_cache[15] = _createElementVNode(\"div\", {\n    \"class\": \"label\"\n  }, \"Углеводы:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_18, _toDisplayString($options.getTotalNutrition('carbs')) + \" г\", 1 /* TEXT */)])])])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Состояние, если нет выбранных продуктов \"), _createVNode(_component_el_empty, {\n    description: \"В вашем дневнике пока нет продуктов. Воспользуйтесь поиском, чтобы добавить продукты.\"\n  })], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" Модальное окно добавления продукта \"), _createVNode(_component_el_dialog, {\n    modelValue: $data.addProductVisible,\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = function ($event) {\n      return $data.addProductVisible = $event;\n    }),\n    title: \"Добавить новый продукт\",\n    width: \"500px\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_20, [_createVNode(_component_el_button, {\n        onClick: _cache[7] || (_cache[7] = function ($event) {\n          return $data.addProductVisible = false;\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[20] || (_cache[20] = [_createTextVNode(\"Отмена\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        loading: $data.loading,\n        onClick: $options.submitNewProduct\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[21] || (_cache[21] = [_createTextVNode(\" Добавить \")]);\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"loading\", \"onClick\"])])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, {\n        model: $data.newProduct,\n        rules: $data.productRules,\n        ref: \"productForm\",\n        \"label-position\": \"top\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"Название продукта\",\n            prop: \"name\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $data.newProduct.name,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $data.newProduct.name = $event;\n                }),\n                placeholder: \"Введите название продукта\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"Калории (на 100г)\",\n            prop: \"calories\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input_number, {\n                modelValue: $data.newProduct.calories,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $data.newProduct.calories = $event;\n                }),\n                min: 0,\n                max: 5000,\n                precision: 0,\n                step: 1,\n                \"class\": \"w-full\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createElementVNode(\"div\", _hoisted_19, [_createVNode(_component_el_form_item, {\n            label: \"Белки (г)\",\n            prop: \"proteins\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input_number, {\n                modelValue: $data.newProduct.proteins,\n                \"onUpdate:modelValue\": _cache[3] || (_cache[3] = function ($event) {\n                  return $data.newProduct.proteins = $event;\n                }),\n                min: 0,\n                max: 500,\n                precision: 1,\n                step: 0.1,\n                \"class\": \"w-full\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"Жиры (г)\",\n            prop: \"fats\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input_number, {\n                modelValue: $data.newProduct.fats,\n                \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n                  return $data.newProduct.fats = $event;\n                }),\n                min: 0,\n                max: 500,\n                precision: 1,\n                step: 0.1,\n                \"class\": \"w-full\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"Углеводы (г)\",\n            prop: \"carbs\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input_number, {\n                modelValue: $data.newProduct.carbs,\n                \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n                  return $data.newProduct.carbs = $event;\n                }),\n                min: 0,\n                max: 500,\n                precision: 1,\n                step: 0.1,\n                \"class\": \"w-full\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          })]), $data.isAdmin ? (_openBlock(), _createBlock(_component_el_form_item, {\n            key: 0\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_checkbox, {\n                modelValue: $data.newProduct.isPublic,\n                \"onUpdate:modelValue\": _cache[6] || (_cache[6] = function ($event) {\n                  return $data.newProduct.isPublic = $event;\n                })\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[18] || (_cache[18] = [_createTextVNode(\"Добавить в общую базу данных\")]);\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\"]), _cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n                \"class\": \"text-xs text-gray-500 mt-1\"\n              }, \" Если отмечено, продукт будет доступен всем пользователям \", -1 /* HOISTED */))];\n            }),\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\", \"rules\"])];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_hoisted_2","_hoisted_3","_createVNode","_component_el_autocomplete","modelValue","$data","searchQuery","_cache","$event","$options","searchProducts","placeholder","onSelect","handleProductSelect","_withCtx","_ref","item","_hoisted_4","_hoisted_5","_toDisplayString","name","_hoisted_6","calories","proteins","fats","carbs","_","_hoisted_7","_component_el_button","type","onClick","openAddProductModal","_createTextVNode","selectedProducts","length","_hoisted_8","_component_el_table","data","style","_component_el_table_column","prop","label","width","scope","_component_el_input","row","quantity","onUpdateModelValue","modelModifiers","number","size","min","max","onChange","updateNutrition","$index","calculatedCalories","toFixed","calculatedProteins","calculatedFats","calculatedCarbs","fixed","removeProduct","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","getTotalNutrition","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_Fragment","_component_el_empty","description","_component_el_dialog","addProductVisible","title","footer","_hoisted_20","loading","submitNewProduct","_component_el_form","model","newProduct","rules","productRules","ref","_component_el_form_item","_component_el_input_number","precision","step","_hoisted_19","isAdmin","_createBlock","_component_el_checkbox","isPublic"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\FoodDiary.vue"],"sourcesContent":["<template>\n  <div class=\"food-diary\">\n    <h1 class=\"text-2xl font-bold mb-6\">Журнал питания</h1>\n    \n    <!-- Форма поиска продуктов -->\n    <div class=\"search-container mb-8\">\n      <h2 class=\"text-xl font-semibold mb-4\">Добавить продукт</h2>\n      <div class=\"search-form\">\n        <el-autocomplete\n          v-model=\"searchQuery\"\n          :fetch-suggestions=\"searchProducts\"\n          placeholder=\"Введите название продукта\"\n          class=\"w-full\"\n          :trigger-on-focus=\"true\"\n          @select=\"handleProductSelect\"\n        >\n          <template #default=\"{ item }\">\n            <div class=\"product-suggestion\">\n              <div class=\"product-name\">{{ item.name }}</div>\n              <div class=\"product-info text-sm text-gray-600\">\n                {{ item.calories }} ккал | Б: {{ item.proteins }}г | Ж: {{ item.fats }}г | У: {{ item.carbs }}г\n              </div>\n            </div>\n          </template>\n        </el-autocomplete>\n        \n        <div class=\"mt-2 text-right\">\n          <el-button type=\"primary\" @click=\"openAddProductModal\">\n            Добавить новый продукт\n          </el-button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Выбранные продукты -->\n    <div class=\"selected-products\" v-if=\"selectedProducts.length > 0\">\n      <h2 class=\"text-xl font-semibold mb-4\">Выбранные продукты</h2>\n      <el-table :data=\"selectedProducts\" style=\"width: 100%\">\n        <el-table-column prop=\"name\" label=\"Название\" width=\"180\" />\n        <el-table-column label=\"Вес (г)\" width=\"120\">\n          <template #default=\"scope\">\n            <el-input\n              v-model.number=\"scope.row.quantity\"\n              type=\"number\"\n              size=\"small\"\n              min=\"1\"\n              max=\"5000\"\n              @change=\"updateNutrition(scope.$index)\"\n              class=\"weight-input\"\n            />\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Калории\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedCalories.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Белки (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedProteins.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Жиры (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedFats.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Углеводы (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedCarbs.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column fixed=\"right\" label=\"Действия\" width=\"120\">\n          <template #default=\"scope\">\n            <el-button \n              type=\"danger\" \n              size=\"small\" \n              @click=\"removeProduct(scope.$index)\"\n            >\n              Удалить\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <!-- Итоги КБЖУ -->\n      <div class=\"nutrition-summary mt-6 p-4 bg-gray-50 rounded-lg\">\n        <h3 class=\"text-lg font-semibold mb-2\">Итого за сегодня:</h3>\n        <div class=\"grid grid-cols-4 gap-4\">\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Калории:</div>\n            <div class=\"value\">{{ getTotalNutrition('calories') }} ккал</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Белки:</div>\n            <div class=\"value\">{{ getTotalNutrition('proteins') }} г</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Жиры:</div>\n            <div class=\"value\">{{ getTotalNutrition('fats') }} г</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Углеводы:</div>\n            <div class=\"value\">{{ getTotalNutrition('carbs') }} г</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Состояние, если нет выбранных продуктов -->\n    <el-empty \n      v-else \n      description=\"В вашем дневнике пока нет продуктов. Воспользуйтесь поиском, чтобы добавить продукты.\" \n    />\n    \n    <!-- Модальное окно добавления продукта -->\n    <el-dialog\n      v-model=\"addProductVisible\"\n      title=\"Добавить новый продукт\"\n      width=\"500px\"\n    >\n      <el-form \n        :model=\"newProduct\" \n        :rules=\"productRules\" \n        ref=\"productForm\" \n        label-position=\"top\"\n      >\n        <el-form-item label=\"Название продукта\" prop=\"name\">\n          <el-input v-model=\"newProduct.name\" placeholder=\"Введите название продукта\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Калории (на 100г)\" prop=\"calories\">\n          <el-input-number \n            v-model=\"newProduct.calories\" \n            :min=\"0\" \n            :max=\"5000\" \n            :precision=\"0\" \n            :step=\"1\"\n            class=\"w-full\"\n          />\n        </el-form-item>\n        \n        <div class=\"grid grid-cols-3 gap-4\">\n          <el-form-item label=\"Белки (г)\" prop=\"proteins\">\n            <el-input-number \n              v-model=\"newProduct.proteins\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\" \n              class=\"w-full\"\n            />\n          </el-form-item>\n          \n          <el-form-item label=\"Жиры (г)\" prop=\"fats\">\n            <el-input-number \n              v-model=\"newProduct.fats\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\"\n              class=\"w-full\"\n            />\n          </el-form-item>\n          \n          <el-form-item label=\"Углеводы (г)\" prop=\"carbs\">\n            <el-input-number \n              v-model=\"newProduct.carbs\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\"\n              class=\"w-full\"\n            />\n          </el-form-item>\n        </div>\n        \n        <el-form-item v-if=\"isAdmin\">\n          <el-checkbox v-model=\"newProduct.isPublic\">Добавить в общую базу данных</el-checkbox>\n          <div class=\"text-xs text-gray-500 mt-1\">\n            Если отмечено, продукт будет доступен всем пользователям\n          </div>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"addProductVisible = false\">Отмена</el-button>\n          <el-button type=\"primary\" :loading=\"loading\" @click=\"submitNewProduct\">\n            Добавить\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'FoodDiaryPage',\n  data() {\n    return {\n      searchQuery: '',\n      selectedProducts: [],\n      loading: false,\n      addProductVisible: false,\n      isAdmin: false, // Заглушка, потом будем определять по токену\n      newProduct: {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      },\n      productRules: {\n        name: [\n          { required: true, message: 'Пожалуйста, введите название продукта', trigger: 'blur' },\n          { min: 2, message: 'Название должно быть не менее 2 символов', trigger: 'blur' }\n        ],\n        calories: [\n          { required: true, message: 'Пожалуйста, укажите калорийность', trigger: 'blur' },\n          { type: 'number', min: 0, max: 5000, message: 'Калории должны быть от 0 до 5000', trigger: 'blur' }\n        ],\n        proteins: [\n          { required: true, message: 'Пожалуйста, укажите содержание белков', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Белки должны быть от 0 до 500г', trigger: 'blur' }\n        ],\n        fats: [\n          { required: true, message: 'Пожалуйста, укажите содержание жиров', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Жиры должны быть от 0 до 500г', trigger: 'blur' }\n        ],\n        carbs: [\n          { required: true, message: 'Пожалуйста, укажите содержание углеводов', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Углеводы должны быть от 0 до 500г', trigger: 'blur' }\n        ]\n      }\n    };\n  },\n  created() {\n    // Проверяем, является ли пользователь администратором\n    this.checkIfAdmin();\n  },\n  methods: {\n    // Проверка прав администратора\n    checkIfAdmin() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // В учебных целях просто получаем id пользователя из токена\n          // В реальном приложении здесь должна быть проверка роли\n          const tokenData = JSON.parse(atob(token.split('.')[1]));\n          this.isAdmin = tokenData.id === 1; // Считаем пользователя с id=1 администратором\n        } catch (error) {\n          console.error('Ошибка при проверке прав администратора:', error);\n          this.isAdmin = false;\n        }\n      } else {\n        this.isAdmin = false;\n      }\n    },\n    \n    // Поиск продуктов с автодополнением\n    async searchProducts(queryString, callback) {\n      if (queryString.length < 2) {\n        callback([]);\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n        \n        console.log('Запрос поиска продуктов:', queryString);\n        \n        const response = await axios.get('/api/products/search', {\n          params: {\n            q: queryString,\n            limit: 5\n          },\n          headers\n        });\n        \n        console.log('Результаты поиска продуктов:', response.data);\n        callback(response.data);\n      } catch (error) {\n        console.error('Ошибка при поиске продуктов:', error);\n        if (error.response) {\n          console.error('Ответ сервера:', error.response.data);\n        }\n        ElMessage({\n          message: 'Ошибка при поиске продуктов. Пожалуйста, попробуйте снова.',\n          type: 'error'\n        });\n        callback([]);\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Обработка выбора продукта из списка\n    handleProductSelect(item) {\n      // Стандартное количество - 100г\n      const quantity = 100;\n      \n      // Преобразуем все значения в числа, чтобы избежать ошибок\n      const calories = Number(item.calories) || 0;\n      const proteins = Number(item.proteins) || 0;\n      const fats = Number(item.fats) || 0;\n      const carbs = Number(item.carbs) || 0;\n      \n      // Добавляем продукт в список выбранных с рассчитанными значениями\n      this.selectedProducts.push({\n        id: item.id,\n        name: item.name,\n        calories: calories,\n        proteins: proteins,\n        fats: fats,\n        carbs: carbs,\n        quantity: quantity,\n        calculatedCalories: calories,\n        calculatedProteins: proteins,\n        calculatedFats: fats,\n        calculatedCarbs: carbs\n      });\n      \n      // Очищаем строку поиска\n      this.searchQuery = '';\n    },\n    \n    // Удаление продукта из списка\n    removeProduct(index) {\n      this.selectedProducts.splice(index, 1);\n    },\n    \n    // Расчет общего количества калорий/белков/жиров/углеводов\n    getTotalNutrition(nutrient) {\n      const calculatedNutrient = 'calculated' + nutrient.charAt(0).toUpperCase() + nutrient.slice(1);\n      const total = this.selectedProducts.reduce((sum, product) => {\n        // Проверяем, что значение является числом\n        const value = product[calculatedNutrient];\n        return sum + (typeof value === 'number' ? value : 0);\n      }, 0);\n      \n      // Проверяем, что результат - число\n      return typeof total === 'number' ? total.toFixed(1) : '0.0';\n    },\n    \n    // Обновление КБЖУ при изменении веса продукта\n    updateNutrition(index) {\n      const product = this.selectedProducts[index];\n      let quantity = parseFloat(product.quantity);\n      \n      // Валидация введенного значения\n      if (isNaN(quantity) || quantity < 1) {\n        quantity = 1;\n        this.selectedProducts[index].quantity = 1;\n      } else if (quantity > 5000) {\n        quantity = 5000;\n        this.selectedProducts[index].quantity = 5000;\n      }\n      \n      // Убедимся, что базовые значения - числа\n      const calories = Number(product.calories) || 0;\n      const proteins = Number(product.proteins) || 0;\n      const fats = Number(product.fats) || 0;\n      const carbs = Number(product.carbs) || 0;\n      \n      // Пересчитываем КБЖУ согласно весу\n      const calculatedCalories = (calories * quantity) / 100;\n      const calculatedProteins = (proteins * quantity) / 100;\n      const calculatedFats = (fats * quantity) / 100;\n      const calculatedCarbs = (carbs * quantity) / 100;\n      \n      this.selectedProducts[index] = {\n        ...product,\n        quantity,\n        calories,\n        proteins,\n        fats,\n        carbs,\n        calculatedCalories,\n        calculatedProteins,\n        calculatedFats,\n        calculatedCarbs\n      };\n    },\n    \n    // Открыть модальное окно добавления продукта\n    openAddProductModal() {\n      // Сбрасываем форму\n      this.newProduct = {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      };\n      this.addProductVisible = true;\n    },\n    \n    // Добавление нового продукта\n    async submitNewProduct() {\n      // Проверяем валидность формы\n      this.$refs.productForm.validate(async (valid) => {\n        if (!valid) {\n          return false;\n        }\n        \n        this.loading = true;\n        try {\n          const token = localStorage.getItem('token');\n          if (!token) {\n            throw new Error('Требуется авторизация');\n          }\n          \n          console.log('Отправка данных нового продукта:', this.newProduct);\n          \n          // Преобразуем данные в правильный формат\n          const productData = {\n            name: this.newProduct.name,\n            calories: Number(this.newProduct.calories),\n            proteins: Number(this.newProduct.proteins),\n            fats: Number(this.newProduct.fats),\n            carbs: Number(this.newProduct.carbs),\n            isPublic: Boolean(this.newProduct.isPublic)\n          };\n          \n          const response = await axios.post('/api/products/add', productData, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          console.log('Ответ сервера:', response.data);\n          \n          // Закрываем модальное окно\n          this.addProductVisible = false;\n          \n          // Показываем сообщение об успехе\n          ElMessage({\n            message: 'Продукт успешно добавлен',\n            type: 'success'\n          });\n          \n          // Преобразуем значения с сервера в числа\n          const newProduct = response.data.product;\n          this.handleProductSelect({\n            id: newProduct.id,\n            name: newProduct.name,\n            calories: Number(newProduct.calories) || 0,\n            proteins: Number(newProduct.proteins) || 0,\n            fats: Number(newProduct.fats) || 0,\n            carbs: Number(newProduct.carbs) || 0\n          });\n          \n        } catch (error) {\n          let errorMessage = 'Ошибка при добавлении продукта';\n          \n          console.error('Ошибка при добавлении продукта:', error);\n          if (error.response) {\n            console.error('Ответ сервера:', error.response.data);\n            \n            if (error.response.data && error.response.data.message) {\n              errorMessage = error.response.data.message;\n              \n              // Если есть детали ошибки, показываем их\n              if (error.response.data.details) {\n                errorMessage = error.response.data.details;\n              }\n            }\n          }\n          \n          ElMessage({\n            message: errorMessage,\n            type: 'error',\n            duration: 5000\n          });\n        } finally {\n          this.loading = false;\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.food-diary {\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.search-form {\n  margin-bottom: 1rem;\n}\n\n.product-suggestion {\n  padding: 5px 0;\n}\n\n.nutrition-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem;\n  border-radius: 4px;\n  background-color: white;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n.label {\n  font-weight: 600;\n}\n\n/* Стили для корректного выравнивания input-number */\n:deep(.el-input-number) {\n  width: 100%;\n}\n\n:deep(.el-input-number .el-input__wrapper) {\n  padding-right: 0;\n}\n\n:deep(.el-input-number .el-input__inner) {\n  text-align: center;\n  padding: 0 8px;\n}\n\n:deep(.el-input-number .el-input-number__decrease),\n:deep(.el-input-number .el-input-number__increase) {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Стили для текстового поля ввода граммовки */\n.weight-input {\n  width: 100%;\n}\n\n:deep(.weight-input .el-input__wrapper) {\n  padding: 0 8px;\n}\n\n:deep(.weight-input .el-input__inner) {\n  text-align: center;\n  -moz-appearance: textfield; /* Firefox */\n}\n\n/* Скрываем стрелки для числового поля в других браузерах */\n:deep(.weight-input .el-input__inner::-webkit-outer-spin-button),\n:deep(.weight-input .el-input__inner::-webkit-inner-spin-button) {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Белый текст для заголовков и параграфов на фоне фонового изображения */\n.food-diary h1,\n.food-diary h2,\n.food-diary p {\n  color: white;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}