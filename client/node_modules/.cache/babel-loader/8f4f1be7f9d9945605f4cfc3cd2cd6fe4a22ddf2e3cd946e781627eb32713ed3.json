{"ast":null,"code":"import _objectSpread from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/web.atob.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'FoodDiaryPage',\n  data: function data() {\n    return {\n      searchQuery: '',\n      selectedProducts: [],\n      loading: false,\n      addProductVisible: false,\n      isAdmin: false,\n      // Заглушка, потом будем определять по токену\n      newProduct: {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      },\n      productRules: {\n        name: [{\n          required: true,\n          message: 'Пожалуйста, введите название продукта',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          message: 'Название должно быть не менее 2 символов',\n          trigger: 'blur'\n        }],\n        calories: [{\n          required: true,\n          message: 'Пожалуйста, укажите калорийность',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 0,\n          max: 5000,\n          message: 'Калории должны быть от 0 до 5000',\n          trigger: 'blur'\n        }],\n        proteins: [{\n          required: true,\n          message: 'Пожалуйста, укажите содержание белков',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 0,\n          max: 500,\n          message: 'Белки должны быть от 0 до 500г',\n          trigger: 'blur'\n        }],\n        fats: [{\n          required: true,\n          message: 'Пожалуйста, укажите содержание жиров',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 0,\n          max: 500,\n          message: 'Жиры должны быть от 0 до 500г',\n          trigger: 'blur'\n        }],\n        carbs: [{\n          required: true,\n          message: 'Пожалуйста, укажите содержание углеводов',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 0,\n          max: 500,\n          message: 'Углеводы должны быть от 0 до 500г',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    // Проверяем, является ли пользователь администратором\n    this.checkIfAdmin();\n  },\n  methods: {\n    // Проверка прав администратора\n    checkIfAdmin: function checkIfAdmin() {\n      var token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // В учебных целях просто получаем id пользователя из токена\n          // В реальном приложении здесь должна быть проверка роли\n          var tokenData = JSON.parse(atob(token.split('.')[1]));\n          this.isAdmin = tokenData.id === 1; // Считаем пользователя с id=1 администратором\n        } catch (error) {\n          console.error('Ошибка при проверке прав администратора:', error);\n          this.isAdmin = false;\n        }\n      } else {\n        this.isAdmin = false;\n      }\n    },\n    // Поиск продуктов с автодополнением\n    searchProducts: function searchProducts(queryString, callback) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, headers, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(queryString.length < 2)) {\n                _context.next = 3;\n                break;\n              }\n              callback([]);\n              return _context.abrupt(\"return\");\n            case 3:\n              _this.loading = true;\n              _context.prev = 4;\n              token = localStorage.getItem('token');\n              headers = token ? {\n                Authorization: \"Bearer \".concat(token)\n              } : {};\n              console.log('Запрос поиска продуктов:', queryString);\n              _context.next = 10;\n              return axios.get('/api/products/search', {\n                params: {\n                  q: queryString,\n                  limit: 5\n                },\n                headers: headers\n              });\n            case 10:\n              response = _context.sent;\n              console.log('Результаты поиска продуктов:', response.data);\n              callback(response.data);\n              _context.next = 21;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](4);\n              console.error('Ошибка при поиске продуктов:', _context.t0);\n              if (_context.t0.response) {\n                console.error('Ответ сервера:', _context.t0.response.data);\n              }\n              ElMessage({\n                message: 'Ошибка при поиске продуктов. Пожалуйста, попробуйте снова.',\n                type: 'error'\n              });\n              callback([]);\n            case 21:\n              _context.prev = 21;\n              _this.loading = false;\n              return _context.finish(21);\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[4, 15, 21, 24]]);\n      }))();\n    },\n    // Обработка выбора продукта из списка\n    handleProductSelect: function handleProductSelect(item) {\n      // Стандартное количество - 100г\n      var quantity = 100;\n\n      // Преобразуем все значения в числа, чтобы избежать ошибок\n      var calories = Number(item.calories) || 0;\n      var proteins = Number(item.proteins) || 0;\n      var fats = Number(item.fats) || 0;\n      var carbs = Number(item.carbs) || 0;\n\n      // Добавляем продукт в список выбранных с рассчитанными значениями\n      this.selectedProducts.push({\n        id: item.id,\n        name: item.name,\n        calories: calories,\n        proteins: proteins,\n        fats: fats,\n        carbs: carbs,\n        quantity: quantity,\n        calculatedCalories: calories,\n        calculatedProteins: proteins,\n        calculatedFats: fats,\n        calculatedCarbs: carbs\n      });\n\n      // Очищаем строку поиска\n      this.searchQuery = '';\n    },\n    // Удаление продукта из списка\n    removeProduct: function removeProduct(index) {\n      this.selectedProducts.splice(index, 1);\n    },\n    // Расчет общего количества калорий/белков/жиров/углеводов\n    getTotalNutrition: function getTotalNutrition(nutrient) {\n      var calculatedNutrient = 'calculated' + nutrient.charAt(0).toUpperCase() + nutrient.slice(1);\n      var total = this.selectedProducts.reduce(function (sum, product) {\n        // Проверяем, что значение является числом\n        var value = product[calculatedNutrient];\n        return sum + (typeof value === 'number' ? value : 0);\n      }, 0);\n\n      // Проверяем, что результат - число\n      return typeof total === 'number' ? total.toFixed(1) : '0.0';\n    },\n    // Обновление КБЖУ при изменении веса продукта\n    updateNutrition: function updateNutrition(index) {\n      var product = this.selectedProducts[index];\n      var quantity = parseFloat(product.quantity);\n\n      // Валидация введенного значения\n      if (isNaN(quantity) || quantity < 1) {\n        quantity = 1;\n        this.selectedProducts[index].quantity = 1;\n      } else if (quantity > 5000) {\n        quantity = 5000;\n        this.selectedProducts[index].quantity = 5000;\n      }\n\n      // Убедимся, что базовые значения - числа\n      var calories = Number(product.calories) || 0;\n      var proteins = Number(product.proteins) || 0;\n      var fats = Number(product.fats) || 0;\n      var carbs = Number(product.carbs) || 0;\n\n      // Пересчитываем КБЖУ согласно весу\n      var calculatedCalories = calories * quantity / 100;\n      var calculatedProteins = proteins * quantity / 100;\n      var calculatedFats = fats * quantity / 100;\n      var calculatedCarbs = carbs * quantity / 100;\n      this.selectedProducts[index] = _objectSpread(_objectSpread({}, product), {}, {\n        quantity: quantity,\n        calories: calories,\n        proteins: proteins,\n        fats: fats,\n        carbs: carbs,\n        calculatedCalories: calculatedCalories,\n        calculatedProteins: calculatedProteins,\n        calculatedFats: calculatedFats,\n        calculatedCarbs: calculatedCarbs\n      });\n    },\n    // Открыть модальное окно добавления продукта\n    openAddProductModal: function openAddProductModal() {\n      // Сбрасываем форму\n      this.newProduct = {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      };\n      this.addProductVisible = true;\n    },\n    // Добавление нового продукта\n    submitNewProduct: function submitNewProduct() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Проверяем валидность формы\n              _this2.$refs.productForm.validate(/*#__PURE__*/function () {\n                var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valid) {\n                  var token, productData, response, newProduct, errorMessage;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (valid) {\n                          _context2.next = 2;\n                          break;\n                        }\n                        return _context2.abrupt(\"return\", false);\n                      case 2:\n                        _this2.loading = true;\n                        _context2.prev = 3;\n                        token = localStorage.getItem('token');\n                        if (token) {\n                          _context2.next = 7;\n                          break;\n                        }\n                        throw new Error('Требуется авторизация');\n                      case 7:\n                        console.log('Отправка данных нового продукта:', _this2.newProduct);\n\n                        // Преобразуем данные в правильный формат\n                        productData = {\n                          name: _this2.newProduct.name,\n                          calories: Number(_this2.newProduct.calories),\n                          proteins: Number(_this2.newProduct.proteins),\n                          fats: Number(_this2.newProduct.fats),\n                          carbs: Number(_this2.newProduct.carbs),\n                          isPublic: Boolean(_this2.newProduct.isPublic)\n                        };\n                        _context2.next = 11;\n                        return axios.post('/api/products/add', productData, {\n                          headers: {\n                            Authorization: \"Bearer \".concat(token),\n                            'Content-Type': 'application/json'\n                          }\n                        });\n                      case 11:\n                        response = _context2.sent;\n                        console.log('Ответ сервера:', response.data);\n\n                        // Закрываем модальное окно\n                        _this2.addProductVisible = false;\n\n                        // Показываем сообщение об успехе\n                        ElMessage({\n                          message: 'Продукт успешно добавлен',\n                          type: 'success'\n                        });\n\n                        // Преобразуем значения с сервера в числа\n                        newProduct = response.data.product;\n                        _this2.handleProductSelect({\n                          id: newProduct.id,\n                          name: newProduct.name,\n                          calories: Number(newProduct.calories) || 0,\n                          proteins: Number(newProduct.proteins) || 0,\n                          fats: Number(newProduct.fats) || 0,\n                          carbs: Number(newProduct.carbs) || 0\n                        });\n                        _context2.next = 25;\n                        break;\n                      case 19:\n                        _context2.prev = 19;\n                        _context2.t0 = _context2[\"catch\"](3);\n                        errorMessage = 'Ошибка при добавлении продукта';\n                        console.error('Ошибка при добавлении продукта:', _context2.t0);\n                        if (_context2.t0.response) {\n                          console.error('Ответ сервера:', _context2.t0.response.data);\n                          if (_context2.t0.response.data && _context2.t0.response.data.message) {\n                            errorMessage = _context2.t0.response.data.message;\n\n                            // Если есть детали ошибки, показываем их\n                            if (_context2.t0.response.data.details) {\n                              errorMessage = _context2.t0.response.data.details;\n                            }\n                          }\n                        }\n                        ElMessage({\n                          message: errorMessage,\n                          type: 'error',\n                          duration: 5000\n                        });\n                      case 25:\n                        _context2.prev = 25;\n                        _this2.loading = false;\n                        return _context2.finish(25);\n                      case 28:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[3, 19, 25, 28]]);\n                }));\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","name","data","searchQuery","selectedProducts","loading","addProductVisible","isAdmin","newProduct","calories","proteins","fats","carbs","isPublic","productRules","required","message","trigger","min","type","max","created","checkIfAdmin","methods","token","localStorage","getItem","tokenData","JSON","parse","atob","split","id","error","console","searchProducts","queryString","callback","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","headers","response","wrap","_callee$","_context","prev","next","length","abrupt","Authorization","concat","log","get","params","q","limit","sent","t0","finish","stop","handleProductSelect","item","quantity","Number","push","calculatedCalories","calculatedProteins","calculatedFats","calculatedCarbs","removeProduct","index","splice","getTotalNutrition","nutrient","calculatedNutrient","charAt","toUpperCase","slice","total","reduce","sum","product","value","toFixed","updateNutrition","parseFloat","isNaN","_objectSpread","openAddProductModal","submitNewProduct","_this2","_callee3","_callee3$","_context3","$refs","productForm","validate","_ref","_callee2","valid","productData","errorMessage","_callee2$","_context2","Error","Boolean","post","details","duration","_x","apply","arguments"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\FoodDiary.vue"],"sourcesContent":["<template>\n  <div class=\"food-diary\">\n    <h1 class=\"text-2xl font-bold mb-6\">Журнал питания</h1>\n    \n    <!-- Форма поиска продуктов -->\n    <div class=\"search-container mb-8\">\n      <h2 class=\"text-xl font-semibold mb-4\">Добавить продукт</h2>\n      <div class=\"search-form\">\n        <el-autocomplete\n          v-model=\"searchQuery\"\n          :fetch-suggestions=\"searchProducts\"\n          placeholder=\"Введите название продукта\"\n          class=\"w-full\"\n          :trigger-on-focus=\"true\"\n          @select=\"handleProductSelect\"\n        >\n          <template #default=\"{ item }\">\n            <div class=\"product-suggestion\">\n              <div class=\"product-name\">{{ item.name }}</div>\n              <div class=\"product-info text-sm text-gray-600\">\n                {{ item.calories }} ккал | Б: {{ item.proteins }}г | Ж: {{ item.fats }}г | У: {{ item.carbs }}г\n              </div>\n            </div>\n          </template>\n        </el-autocomplete>\n        \n        <div class=\"mt-2 text-right\">\n          <el-button type=\"primary\" @click=\"openAddProductModal\">\n            Добавить новый продукт\n          </el-button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Выбранные продукты -->\n    <div class=\"selected-products\" v-if=\"selectedProducts.length > 0\">\n      <h2 class=\"text-xl font-semibold mb-4\">Выбранные продукты</h2>\n      <el-table :data=\"selectedProducts\" style=\"width: 100%\">\n        <el-table-column prop=\"name\" label=\"Название\" width=\"180\" />\n        <el-table-column label=\"Вес (г)\" width=\"120\">\n          <template #default=\"scope\">\n            <el-input\n              v-model.number=\"scope.row.quantity\"\n              type=\"number\"\n              size=\"small\"\n              min=\"1\"\n              max=\"5000\"\n              @change=\"updateNutrition(scope.$index)\"\n              class=\"weight-input\"\n            />\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Калории\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedCalories.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Белки (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedProteins.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Жиры (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedFats.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Углеводы (г)\" width=\"100\">\n          <template #default=\"scope\">\n            {{ scope.row.calculatedCarbs.toFixed(1) }}\n          </template>\n        </el-table-column>\n        <el-table-column fixed=\"right\" label=\"Действия\" width=\"120\">\n          <template #default=\"scope\">\n            <el-button \n              type=\"danger\" \n              size=\"small\" \n              @click=\"removeProduct(scope.$index)\"\n            >\n              Удалить\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <!-- Итоги КБЖУ -->\n      <div class=\"nutrition-summary mt-6 p-4 bg-gray-50 rounded-lg\">\n        <h3 class=\"text-lg font-semibold mb-2\">Итого за сегодня:</h3>\n        <div class=\"grid grid-cols-4 gap-4\">\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Калории:</div>\n            <div class=\"value\">{{ getTotalNutrition('calories') }} ккал</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Белки:</div>\n            <div class=\"value\">{{ getTotalNutrition('proteins') }} г</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Жиры:</div>\n            <div class=\"value\">{{ getTotalNutrition('fats') }} г</div>\n          </div>\n          <div class=\"nutrition-item\">\n            <div class=\"label\">Углеводы:</div>\n            <div class=\"value\">{{ getTotalNutrition('carbs') }} г</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Состояние, если нет выбранных продуктов -->\n    <el-empty \n      v-else \n      description=\"В вашем дневнике пока нет продуктов. Воспользуйтесь поиском, чтобы добавить продукты.\" \n    />\n    \n    <!-- Модальное окно добавления продукта -->\n    <el-dialog\n      v-model=\"addProductVisible\"\n      title=\"Добавить новый продукт\"\n      width=\"500px\"\n    >\n      <el-form \n        :model=\"newProduct\" \n        :rules=\"productRules\" \n        ref=\"productForm\" \n        label-position=\"top\"\n      >\n        <el-form-item label=\"Название продукта\" prop=\"name\">\n          <el-input v-model=\"newProduct.name\" placeholder=\"Введите название продукта\" />\n        </el-form-item>\n        \n        <el-form-item label=\"Калории (на 100г)\" prop=\"calories\">\n          <el-input-number \n            v-model=\"newProduct.calories\" \n            :min=\"0\" \n            :max=\"5000\" \n            :precision=\"0\" \n            :step=\"1\"\n            class=\"w-full\"\n          />\n        </el-form-item>\n        \n        <div class=\"grid grid-cols-3 gap-4\">\n          <el-form-item label=\"Белки (г)\" prop=\"proteins\">\n            <el-input-number \n              v-model=\"newProduct.proteins\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\" \n              class=\"w-full\"\n            />\n          </el-form-item>\n          \n          <el-form-item label=\"Жиры (г)\" prop=\"fats\">\n            <el-input-number \n              v-model=\"newProduct.fats\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\"\n              class=\"w-full\"\n            />\n          </el-form-item>\n          \n          <el-form-item label=\"Углеводы (г)\" prop=\"carbs\">\n            <el-input-number \n              v-model=\"newProduct.carbs\" \n              :min=\"0\" \n              :max=\"500\" \n              :precision=\"1\" \n              :step=\"0.1\"\n              class=\"w-full\"\n            />\n          </el-form-item>\n        </div>\n        \n        <el-form-item v-if=\"isAdmin\">\n          <el-checkbox v-model=\"newProduct.isPublic\">Добавить в общую базу данных</el-checkbox>\n          <div class=\"text-xs text-gray-500 mt-1\">\n            Если отмечено, продукт будет доступен всем пользователям\n          </div>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"addProductVisible = false\">Отмена</el-button>\n          <el-button type=\"primary\" :loading=\"loading\" @click=\"submitNewProduct\">\n            Добавить\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'FoodDiaryPage',\n  data() {\n    return {\n      searchQuery: '',\n      selectedProducts: [],\n      loading: false,\n      addProductVisible: false,\n      isAdmin: false, // Заглушка, потом будем определять по токену\n      newProduct: {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      },\n      productRules: {\n        name: [\n          { required: true, message: 'Пожалуйста, введите название продукта', trigger: 'blur' },\n          { min: 2, message: 'Название должно быть не менее 2 символов', trigger: 'blur' }\n        ],\n        calories: [\n          { required: true, message: 'Пожалуйста, укажите калорийность', trigger: 'blur' },\n          { type: 'number', min: 0, max: 5000, message: 'Калории должны быть от 0 до 5000', trigger: 'blur' }\n        ],\n        proteins: [\n          { required: true, message: 'Пожалуйста, укажите содержание белков', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Белки должны быть от 0 до 500г', trigger: 'blur' }\n        ],\n        fats: [\n          { required: true, message: 'Пожалуйста, укажите содержание жиров', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Жиры должны быть от 0 до 500г', trigger: 'blur' }\n        ],\n        carbs: [\n          { required: true, message: 'Пожалуйста, укажите содержание углеводов', trigger: 'blur' },\n          { type: 'number', min: 0, max: 500, message: 'Углеводы должны быть от 0 до 500г', trigger: 'blur' }\n        ]\n      }\n    };\n  },\n  created() {\n    // Проверяем, является ли пользователь администратором\n    this.checkIfAdmin();\n  },\n  methods: {\n    // Проверка прав администратора\n    checkIfAdmin() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // В учебных целях просто получаем id пользователя из токена\n          // В реальном приложении здесь должна быть проверка роли\n          const tokenData = JSON.parse(atob(token.split('.')[1]));\n          this.isAdmin = tokenData.id === 1; // Считаем пользователя с id=1 администратором\n        } catch (error) {\n          console.error('Ошибка при проверке прав администратора:', error);\n          this.isAdmin = false;\n        }\n      } else {\n        this.isAdmin = false;\n      }\n    },\n    \n    // Поиск продуктов с автодополнением\n    async searchProducts(queryString, callback) {\n      if (queryString.length < 2) {\n        callback([]);\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        const headers = token ? { Authorization: `Bearer ${token}` } : {};\n        \n        console.log('Запрос поиска продуктов:', queryString);\n        \n        const response = await axios.get('/api/products/search', {\n          params: {\n            q: queryString,\n            limit: 5\n          },\n          headers\n        });\n        \n        console.log('Результаты поиска продуктов:', response.data);\n        callback(response.data);\n      } catch (error) {\n        console.error('Ошибка при поиске продуктов:', error);\n        if (error.response) {\n          console.error('Ответ сервера:', error.response.data);\n        }\n        ElMessage({\n          message: 'Ошибка при поиске продуктов. Пожалуйста, попробуйте снова.',\n          type: 'error'\n        });\n        callback([]);\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Обработка выбора продукта из списка\n    handleProductSelect(item) {\n      // Стандартное количество - 100г\n      const quantity = 100;\n      \n      // Преобразуем все значения в числа, чтобы избежать ошибок\n      const calories = Number(item.calories) || 0;\n      const proteins = Number(item.proteins) || 0;\n      const fats = Number(item.fats) || 0;\n      const carbs = Number(item.carbs) || 0;\n      \n      // Добавляем продукт в список выбранных с рассчитанными значениями\n      this.selectedProducts.push({\n        id: item.id,\n        name: item.name,\n        calories: calories,\n        proteins: proteins,\n        fats: fats,\n        carbs: carbs,\n        quantity: quantity,\n        calculatedCalories: calories,\n        calculatedProteins: proteins,\n        calculatedFats: fats,\n        calculatedCarbs: carbs\n      });\n      \n      // Очищаем строку поиска\n      this.searchQuery = '';\n    },\n    \n    // Удаление продукта из списка\n    removeProduct(index) {\n      this.selectedProducts.splice(index, 1);\n    },\n    \n    // Расчет общего количества калорий/белков/жиров/углеводов\n    getTotalNutrition(nutrient) {\n      const calculatedNutrient = 'calculated' + nutrient.charAt(0).toUpperCase() + nutrient.slice(1);\n      const total = this.selectedProducts.reduce((sum, product) => {\n        // Проверяем, что значение является числом\n        const value = product[calculatedNutrient];\n        return sum + (typeof value === 'number' ? value : 0);\n      }, 0);\n      \n      // Проверяем, что результат - число\n      return typeof total === 'number' ? total.toFixed(1) : '0.0';\n    },\n    \n    // Обновление КБЖУ при изменении веса продукта\n    updateNutrition(index) {\n      const product = this.selectedProducts[index];\n      let quantity = parseFloat(product.quantity);\n      \n      // Валидация введенного значения\n      if (isNaN(quantity) || quantity < 1) {\n        quantity = 1;\n        this.selectedProducts[index].quantity = 1;\n      } else if (quantity > 5000) {\n        quantity = 5000;\n        this.selectedProducts[index].quantity = 5000;\n      }\n      \n      // Убедимся, что базовые значения - числа\n      const calories = Number(product.calories) || 0;\n      const proteins = Number(product.proteins) || 0;\n      const fats = Number(product.fats) || 0;\n      const carbs = Number(product.carbs) || 0;\n      \n      // Пересчитываем КБЖУ согласно весу\n      const calculatedCalories = (calories * quantity) / 100;\n      const calculatedProteins = (proteins * quantity) / 100;\n      const calculatedFats = (fats * quantity) / 100;\n      const calculatedCarbs = (carbs * quantity) / 100;\n      \n      this.selectedProducts[index] = {\n        ...product,\n        quantity,\n        calories,\n        proteins,\n        fats,\n        carbs,\n        calculatedCalories,\n        calculatedProteins,\n        calculatedFats,\n        calculatedCarbs\n      };\n    },\n    \n    // Открыть модальное окно добавления продукта\n    openAddProductModal() {\n      // Сбрасываем форму\n      this.newProduct = {\n        name: '',\n        calories: 0,\n        proteins: 0,\n        fats: 0,\n        carbs: 0,\n        isPublic: false\n      };\n      this.addProductVisible = true;\n    },\n    \n    // Добавление нового продукта\n    async submitNewProduct() {\n      // Проверяем валидность формы\n      this.$refs.productForm.validate(async (valid) => {\n        if (!valid) {\n          return false;\n        }\n        \n        this.loading = true;\n        try {\n          const token = localStorage.getItem('token');\n          if (!token) {\n            throw new Error('Требуется авторизация');\n          }\n          \n          console.log('Отправка данных нового продукта:', this.newProduct);\n          \n          // Преобразуем данные в правильный формат\n          const productData = {\n            name: this.newProduct.name,\n            calories: Number(this.newProduct.calories),\n            proteins: Number(this.newProduct.proteins),\n            fats: Number(this.newProduct.fats),\n            carbs: Number(this.newProduct.carbs),\n            isPublic: Boolean(this.newProduct.isPublic)\n          };\n          \n          const response = await axios.post('/api/products/add', productData, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          console.log('Ответ сервера:', response.data);\n          \n          // Закрываем модальное окно\n          this.addProductVisible = false;\n          \n          // Показываем сообщение об успехе\n          ElMessage({\n            message: 'Продукт успешно добавлен',\n            type: 'success'\n          });\n          \n          // Преобразуем значения с сервера в числа\n          const newProduct = response.data.product;\n          this.handleProductSelect({\n            id: newProduct.id,\n            name: newProduct.name,\n            calories: Number(newProduct.calories) || 0,\n            proteins: Number(newProduct.proteins) || 0,\n            fats: Number(newProduct.fats) || 0,\n            carbs: Number(newProduct.carbs) || 0\n          });\n          \n        } catch (error) {\n          let errorMessage = 'Ошибка при добавлении продукта';\n          \n          console.error('Ошибка при добавлении продукта:', error);\n          if (error.response) {\n            console.error('Ответ сервера:', error.response.data);\n            \n            if (error.response.data && error.response.data.message) {\n              errorMessage = error.response.data.message;\n              \n              // Если есть детали ошибки, показываем их\n              if (error.response.data.details) {\n                errorMessage = error.response.data.details;\n              }\n            }\n          }\n          \n          ElMessage({\n            message: errorMessage,\n            type: 'error',\n            duration: 5000\n          });\n        } finally {\n          this.loading = false;\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.food-diary {\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.search-form {\n  margin-bottom: 1rem;\n}\n\n.product-suggestion {\n  padding: 5px 0;\n}\n\n.nutrition-item {\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem;\n  border-radius: 4px;\n  background-color: white;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n.label {\n  font-weight: 600;\n}\n\n/* Стили для корректного выравнивания input-number */\n:deep(.el-input-number) {\n  width: 100%;\n}\n\n:deep(.el-input-number .el-input__wrapper) {\n  padding-right: 0;\n}\n\n:deep(.el-input-number .el-input__inner) {\n  text-align: center;\n  padding: 0 8px;\n}\n\n:deep(.el-input-number .el-input-number__decrease),\n:deep(.el-input-number .el-input-number__increase) {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Стили для текстового поля ввода граммовки */\n.weight-input {\n  width: 100%;\n}\n\n:deep(.weight-input .el-input__wrapper) {\n  padding: 0 8px;\n}\n\n:deep(.weight-input .el-input__inner) {\n  text-align: center;\n  -moz-appearance: textfield; /* Firefox */\n}\n\n/* Скрываем стрелки для числового поля в других браузерах */\n:deep(.weight-input .el-input__inner::-webkit-outer-spin-button),\n:deep(.weight-input .el-input__inner::-webkit-inner-spin-button) {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Белый текст для заголовков и параграфов на фоне фонового изображения */\n.food-diary h1,\n.food-diary h2,\n.food-diary p {\n  color: white;\n}\n</style> "],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsMA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,cAAc;AAExC,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,gBAAgB,EAAE,EAAE;MACpBC,OAAO,EAAE,KAAK;MACdC,iBAAiB,EAAE,KAAK;MACxBC,OAAO,EAAE,KAAK;MAAE;MAChBC,UAAU,EAAE;QACVP,IAAI,EAAE,EAAE;QACRQ,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE;QACZb,IAAI,EAAE,CACJ;UAAEc,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,uCAAuC;UAAEC,OAAO,EAAE;QAAO,CAAC,EACrF;UAAEC,GAAG,EAAE,CAAC;UAAEF,OAAO,EAAE,0CAA0C;UAAEC,OAAO,EAAE;QAAO,EAChF;QACDR,QAAQ,EAAE,CACR;UAAEM,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,kCAAkC;UAAEC,OAAO,EAAE;QAAO,CAAC,EAChF;UAAEE,IAAI,EAAE,QAAQ;UAAED,GAAG,EAAE,CAAC;UAAEE,GAAG,EAAE,IAAI;UAAEJ,OAAO,EAAE,kCAAkC;UAAEC,OAAO,EAAE;QAAO,EACnG;QACDP,QAAQ,EAAE,CACR;UAAEK,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,uCAAuC;UAAEC,OAAO,EAAE;QAAO,CAAC,EACrF;UAAEE,IAAI,EAAE,QAAQ;UAAED,GAAG,EAAE,CAAC;UAAEE,GAAG,EAAE,GAAG;UAAEJ,OAAO,EAAE,gCAAgC;UAAEC,OAAO,EAAE;QAAO,EAChG;QACDN,IAAI,EAAE,CACJ;UAAEI,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,sCAAsC;UAAEC,OAAO,EAAE;QAAO,CAAC,EACpF;UAAEE,IAAI,EAAE,QAAQ;UAAED,GAAG,EAAE,CAAC;UAAEE,GAAG,EAAE,GAAG;UAAEJ,OAAO,EAAE,+BAA+B;UAAEC,OAAO,EAAE;QAAO,EAC/F;QACDL,KAAK,EAAE,CACL;UAAEG,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,0CAA0C;UAAEC,OAAO,EAAE;QAAO,CAAC,EACxF;UAAEE,IAAI,EAAE,QAAQ;UAAED,GAAG,EAAE,CAAC;UAAEE,GAAG,EAAE,GAAG;UAAEJ,OAAO,EAAE,mCAAmC;UAAEC,OAAO,EAAE;QAAO;MAEtG;IACF,CAAC;EACH,CAAC;EACDI,OAAO,WAAPA,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,YAAY,WAAZA,YAAYA,CAAA,EAAG;MACb,IAAME,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACT,IAAI;UACF;UACA;UACA,IAAMG,SAAQ,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACvD,IAAI,CAACxB,OAAM,GAAIoB,SAAS,CAACK,EAAC,KAAM,CAAC,EAAE;QACrC,EAAE,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;UAChE,IAAI,CAAC1B,OAAM,GAAI,KAAK;QACtB;MACF,OAAO;QACL,IAAI,CAACA,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACM4B,cAAc,WAAdA,cAAcA,CAACC,WAAW,EAAEC,QAAQ,EAAE;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAlB,KAAA,EAAAmB,OAAA,EAAAC,QAAA;QAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,MACtCb,WAAW,CAACc,MAAK,GAAI,CAAC;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACxBZ,QAAQ,CAAC,EAAE,CAAC;cAAA,OAAAU,QAAA,CAAAI,MAAA;YAAA;cAIdb,KAAI,CAACjC,OAAM,GAAI,IAAI;cAAA0C,QAAA,CAAAC,IAAA;cAEXxB,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cACrCiB,OAAM,GAAInB,KAAI,GAAI;gBAAE4B,aAAa,YAAAC,MAAA,CAAY7B,KAAK;cAAG,IAAI,CAAC,CAAC;cAEjEU,OAAO,CAACoB,GAAG,CAAC,0BAA0B,EAAElB,WAAW,CAAC;cAAAW,QAAA,CAAAE,IAAA;cAAA,OAE7BlD,KAAK,CAACwD,GAAG,CAAC,sBAAsB,EAAE;gBACvDC,MAAM,EAAE;kBACNC,CAAC,EAAErB,WAAW;kBACdsB,KAAK,EAAE;gBACT,CAAC;gBACDf,OAAM,EAANA;cACF,CAAC,CAAC;YAAA;cANIC,QAAO,GAAAG,QAAA,CAAAY,IAAA;cAQbzB,OAAO,CAACoB,GAAG,CAAC,8BAA8B,EAAEV,QAAQ,CAAC1C,IAAI,CAAC;cAC1DmC,QAAQ,CAACO,QAAQ,CAAC1C,IAAI,CAAC;cAAA6C,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAa,EAAA,GAAAb,QAAA;cAEvBb,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAAc,QAAA,CAAAa,EAAO,CAAC;cACpD,IAAIb,QAAA,CAAAa,EAAA,CAAMhB,QAAQ,EAAE;gBAClBV,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEc,QAAA,CAAAa,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAAC;cACtD;cACAF,SAAS,CAAC;gBACRgB,OAAO,EAAE,4DAA4D;gBACrEG,IAAI,EAAE;cACR,CAAC,CAAC;cACFkB,QAAQ,CAAC,EAAE,CAAC;YAAA;cAAAU,QAAA,CAAAC,IAAA;cAEZV,KAAI,CAACjC,OAAM,GAAI,KAAK;cAAA,OAAA0C,QAAA,CAAAc,MAAA;YAAA;YAAA;cAAA,OAAAd,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAApB,OAAA;MAAA;IAExB,CAAC;IAED;IACAqB,mBAAmB,WAAnBA,mBAAmBA,CAACC,IAAI,EAAE;MACxB;MACA,IAAMC,QAAO,GAAI,GAAG;;MAEpB;MACA,IAAMxD,QAAO,GAAIyD,MAAM,CAACF,IAAI,CAACvD,QAAQ,KAAK,CAAC;MAC3C,IAAMC,QAAO,GAAIwD,MAAM,CAACF,IAAI,CAACtD,QAAQ,KAAK,CAAC;MAC3C,IAAMC,IAAG,GAAIuD,MAAM,CAACF,IAAI,CAACrD,IAAI,KAAK,CAAC;MACnC,IAAMC,KAAI,GAAIsD,MAAM,CAACF,IAAI,CAACpD,KAAK,KAAK,CAAC;;MAErC;MACA,IAAI,CAACR,gBAAgB,CAAC+D,IAAI,CAAC;QACzBnC,EAAE,EAAEgC,IAAI,CAAChC,EAAE;QACX/B,IAAI,EAAE+D,IAAI,CAAC/D,IAAI;QACfQ,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA,QAAQ;QAClBC,IAAI,EAAEA,IAAI;QACVC,KAAK,EAAEA,KAAK;QACZqD,QAAQ,EAAEA,QAAQ;QAClBG,kBAAkB,EAAE3D,QAAQ;QAC5B4D,kBAAkB,EAAE3D,QAAQ;QAC5B4D,cAAc,EAAE3D,IAAI;QACpB4D,eAAe,EAAE3D;MACnB,CAAC,CAAC;;MAEF;MACA,IAAI,CAACT,WAAU,GAAI,EAAE;IACvB,CAAC;IAED;IACAqE,aAAa,WAAbA,aAAaA,CAACC,KAAK,EAAE;MACnB,IAAI,CAACrE,gBAAgB,CAACsE,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;IACAE,iBAAiB,WAAjBA,iBAAiBA,CAACC,QAAQ,EAAE;MAC1B,IAAMC,kBAAiB,GAAI,YAAW,GAAID,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIH,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC;MAC9F,IAAMC,KAAI,GAAI,IAAI,CAAC7E,gBAAgB,CAAC8E,MAAM,CAAC,UAACC,GAAG,EAAEC,OAAO,EAAK;QAC3D;QACA,IAAMC,KAAI,GAAID,OAAO,CAACP,kBAAkB,CAAC;QACzC,OAAOM,GAAE,IAAK,OAAOE,KAAI,KAAM,QAAO,GAAIA,KAAI,GAAI,CAAC,CAAC;MACtD,CAAC,EAAE,CAAC,CAAC;;MAEL;MACA,OAAO,OAAOJ,KAAI,KAAM,QAAO,GAAIA,KAAK,CAACK,OAAO,CAAC,CAAC,IAAI,KAAK;IAC7D,CAAC;IAED;IACAC,eAAe,WAAfA,eAAeA,CAACd,KAAK,EAAE;MACrB,IAAMW,OAAM,GAAI,IAAI,CAAChF,gBAAgB,CAACqE,KAAK,CAAC;MAC5C,IAAIR,QAAO,GAAIuB,UAAU,CAACJ,OAAO,CAACnB,QAAQ,CAAC;;MAE3C;MACA,IAAIwB,KAAK,CAACxB,QAAQ,KAAKA,QAAO,GAAI,CAAC,EAAE;QACnCA,QAAO,GAAI,CAAC;QACZ,IAAI,CAAC7D,gBAAgB,CAACqE,KAAK,CAAC,CAACR,QAAO,GAAI,CAAC;MAC3C,OAAO,IAAIA,QAAO,GAAI,IAAI,EAAE;QAC1BA,QAAO,GAAI,IAAI;QACf,IAAI,CAAC7D,gBAAgB,CAACqE,KAAK,CAAC,CAACR,QAAO,GAAI,IAAI;MAC9C;;MAEA;MACA,IAAMxD,QAAO,GAAIyD,MAAM,CAACkB,OAAO,CAAC3E,QAAQ,KAAK,CAAC;MAC9C,IAAMC,QAAO,GAAIwD,MAAM,CAACkB,OAAO,CAAC1E,QAAQ,KAAK,CAAC;MAC9C,IAAMC,IAAG,GAAIuD,MAAM,CAACkB,OAAO,CAACzE,IAAI,KAAK,CAAC;MACtC,IAAMC,KAAI,GAAIsD,MAAM,CAACkB,OAAO,CAACxE,KAAK,KAAK,CAAC;;MAExC;MACA,IAAMwD,kBAAiB,GAAK3D,QAAO,GAAIwD,QAAQ,GAAI,GAAG;MACtD,IAAMI,kBAAiB,GAAK3D,QAAO,GAAIuD,QAAQ,GAAI,GAAG;MACtD,IAAMK,cAAa,GAAK3D,IAAG,GAAIsD,QAAQ,GAAI,GAAG;MAC9C,IAAMM,eAAc,GAAK3D,KAAI,GAAIqD,QAAQ,GAAI,GAAG;MAEhD,IAAI,CAAC7D,gBAAgB,CAACqE,KAAK,IAAAiB,aAAA,CAAAA,aAAA,KACtBN,OAAO;QACVnB,QAAQ,EAARA,QAAQ;QACRxD,QAAQ,EAARA,QAAQ;QACRC,QAAQ,EAARA,QAAQ;QACRC,IAAI,EAAJA,IAAI;QACJC,KAAK,EAALA,KAAK;QACLwD,kBAAkB,EAAlBA,kBAAkB;QAClBC,kBAAkB,EAAlBA,kBAAkB;QAClBC,cAAc,EAAdA,cAAc;QACdC,eAAc,EAAdA;MAAc,EACf;IACH,CAAC;IAED;IACAoB,mBAAmB,WAAnBA,mBAAmBA,CAAA,EAAG;MACpB;MACA,IAAI,CAACnF,UAAS,GAAI;QAChBP,IAAI,EAAE,EAAE;QACRQ,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE,CAAC;QACXC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE;MACZ,CAAC;MACD,IAAI,CAACP,iBAAgB,GAAI,IAAI;IAC/B,CAAC;IAED;IACMsF,gBAAgB,WAAhBA,gBAAgBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAAtD,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAqD,SAAA;QAAA,OAAAtD,mBAAA,GAAAK,IAAA,UAAAkD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAhD,IAAA,GAAAgD,SAAA,CAAA/C,IAAA;YAAA;cACvB;cACA4C,MAAI,CAACI,KAAK,CAACC,WAAW,CAACC,QAAQ;gBAAA,IAAAC,IAAA,GAAA7D,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAA4D,SAAOC,KAAK;kBAAA,IAAA9E,KAAA,EAAA+E,WAAA,EAAA3D,QAAA,EAAApC,UAAA,EAAAgG,YAAA;kBAAA,OAAAhE,mBAAA,GAAAK,IAAA,UAAA4D,UAAAC,SAAA;oBAAA,kBAAAA,SAAA,CAAA1D,IAAA,GAAA0D,SAAA,CAAAzD,IAAA;sBAAA;wBAAA,IACrCqD,KAAK;0BAAAI,SAAA,CAAAzD,IAAA;0BAAA;wBAAA;wBAAA,OAAAyD,SAAA,CAAAvD,MAAA,WACD,KAAK;sBAAA;wBAGd0C,MAAI,CAACxF,OAAM,GAAI,IAAI;wBAAAqG,SAAA,CAAA1D,IAAA;wBAEXxB,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;wBAAA,IACtCF,KAAK;0BAAAkF,SAAA,CAAAzD,IAAA;0BAAA;wBAAA;wBAAA,MACF,IAAI0D,KAAK,CAAC,uBAAuB,CAAC;sBAAA;wBAG1CzE,OAAO,CAACoB,GAAG,CAAC,kCAAkC,EAAEuC,MAAI,CAACrF,UAAU,CAAC;;wBAEhE;wBACM+F,WAAU,GAAI;0BAClBtG,IAAI,EAAE4F,MAAI,CAACrF,UAAU,CAACP,IAAI;0BAC1BQ,QAAQ,EAAEyD,MAAM,CAAC2B,MAAI,CAACrF,UAAU,CAACC,QAAQ,CAAC;0BAC1CC,QAAQ,EAAEwD,MAAM,CAAC2B,MAAI,CAACrF,UAAU,CAACE,QAAQ,CAAC;0BAC1CC,IAAI,EAAEuD,MAAM,CAAC2B,MAAI,CAACrF,UAAU,CAACG,IAAI,CAAC;0BAClCC,KAAK,EAAEsD,MAAM,CAAC2B,MAAI,CAACrF,UAAU,CAACI,KAAK,CAAC;0BACpCC,QAAQ,EAAE+F,OAAO,CAACf,MAAI,CAACrF,UAAU,CAACK,QAAQ;wBAC5C,CAAC;wBAAA6F,SAAA,CAAAzD,IAAA;wBAAA,OAEsBlD,KAAK,CAAC8G,IAAI,CAAC,mBAAmB,EAAEN,WAAW,EAAE;0BAClE5D,OAAO,EAAE;4BACPS,aAAa,YAAAC,MAAA,CAAY7B,KAAK,CAAE;4BAChC,cAAc,EAAE;0BAClB;wBACF,CAAC,CAAC;sBAAA;wBALIoB,QAAO,GAAA8D,SAAA,CAAA/C,IAAA;wBAObzB,OAAO,CAACoB,GAAG,CAAC,gBAAgB,EAAEV,QAAQ,CAAC1C,IAAI,CAAC;;wBAE5C;wBACA2F,MAAI,CAACvF,iBAAgB,GAAI,KAAK;;wBAE9B;wBACAN,SAAS,CAAC;0BACRgB,OAAO,EAAE,0BAA0B;0BACnCG,IAAI,EAAE;wBACR,CAAC,CAAC;;wBAEF;wBACMX,UAAS,GAAIoC,QAAQ,CAAC1C,IAAI,CAACkF,OAAO;wBACxCS,MAAI,CAAC9B,mBAAmB,CAAC;0BACvB/B,EAAE,EAAExB,UAAU,CAACwB,EAAE;0BACjB/B,IAAI,EAAEO,UAAU,CAACP,IAAI;0BACrBQ,QAAQ,EAAEyD,MAAM,CAAC1D,UAAU,CAACC,QAAQ,KAAK,CAAC;0BAC1CC,QAAQ,EAAEwD,MAAM,CAAC1D,UAAU,CAACE,QAAQ,KAAK,CAAC;0BAC1CC,IAAI,EAAEuD,MAAM,CAAC1D,UAAU,CAACG,IAAI,KAAK,CAAC;0BAClCC,KAAK,EAAEsD,MAAM,CAAC1D,UAAU,CAACI,KAAK,KAAK;wBACrC,CAAC,CAAC;wBAAA8F,SAAA,CAAAzD,IAAA;wBAAA;sBAAA;wBAAAyD,SAAA,CAAA1D,IAAA;wBAAA0D,SAAA,CAAA9C,EAAA,GAAA8C,SAAA;wBAGEF,YAAW,GAAI,gCAAgC;wBAEnDtE,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAAyE,SAAA,CAAA9C,EAAO,CAAC;wBACvD,IAAI8C,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,EAAE;0BAClBV,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEyE,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAAC;0BAEpD,IAAIwG,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAG,IAAKwG,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAACc,OAAO,EAAE;4BACtDwF,YAAW,GAAIE,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAACc,OAAO;;4BAE1C;4BACA,IAAI0F,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAAC4G,OAAO,EAAE;8BAC/BN,YAAW,GAAIE,SAAA,CAAA9C,EAAA,CAAMhB,QAAQ,CAAC1C,IAAI,CAAC4G,OAAO;4BAC5C;0BACF;wBACF;wBAEA9G,SAAS,CAAC;0BACRgB,OAAO,EAAEwF,YAAY;0BACrBrF,IAAI,EAAE,OAAO;0BACb4F,QAAQ,EAAE;wBACZ,CAAC,CAAC;sBAAA;wBAAAL,SAAA,CAAA1D,IAAA;wBAEF6C,MAAI,CAACxF,OAAM,GAAI,KAAK;wBAAA,OAAAqG,SAAA,CAAA7C,MAAA;sBAAA;sBAAA;wBAAA,OAAA6C,SAAA,CAAA5C,IAAA;oBAAA;kBAAA,GAAAuC,QAAA;gBAAA,CAEvB;gBAAA,iBAAAW,EAAA;kBAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC;YAAA;YAAA;cAAA,OAAAlB,SAAA,CAAAlC,IAAA;UAAA;QAAA,GAAAgC,QAAA;MAAA;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}