{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, withCtx as _withCtx, normalizeClass as _normalizeClass } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"water-tracker\"\n};\nvar _hoisted_2 = {\n  \"class\": \"water-card\"\n};\nvar _hoisted_3 = {\n  \"class\": \"info-section\"\n};\nvar _hoisted_4 = {\n  \"class\": \"date-control\"\n};\nvar _hoisted_5 = {\n  \"class\": \"water-info\"\n};\nvar _hoisted_6 = {\n  \"class\": \"water-stats\"\n};\nvar _hoisted_7 = {\n  \"class\": \"stat-item\"\n};\nvar _hoisted_8 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_9 = {\n  \"class\": \"stat-item\"\n};\nvar _hoisted_10 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_11 = {\n  \"class\": \"stat-item\"\n};\nvar _hoisted_12 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_13 = {\n  \"class\": \"water-progress-container\"\n};\nvar _hoisted_14 = {\n  \"class\": \"water-graphic\"\n};\nvar _hoisted_15 = {\n  \"class\": \"progress-text\"\n};\nvar _hoisted_16 = {\n  \"class\": \"add-water-section\"\n};\nvar _hoisted_17 = {\n  \"class\": \"quick-add-buttons\"\n};\nvar _hoisted_18 = {\n  \"class\": \"custom-amount\"\n};\nvar _hoisted_19 = {\n  key: 0,\n  \"class\": \"remove-water-section\"\n};\nvar _hoisted_20 = {\n  \"class\": \"quick-remove-buttons\"\n};\nvar _hoisted_21 = {\n  \"class\": \"custom-amount\"\n};\nvar _hoisted_22 = {\n  key: 1,\n  \"class\": \"water-history-section\"\n};\nvar _hoisted_23 = {\n  \"class\": \"history-chart\"\n};\nvar _hoisted_24 = {\n  \"class\": \"history-day\"\n};\nvar _hoisted_25 = {\n  \"class\": \"history-bar-container\"\n};\nvar _hoisted_26 = {\n  key: 0,\n  \"class\": \"water-waves-small\"\n};\nvar _hoisted_27 = {\n  \"class\": \"history-amount\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n  var _component_el_input_number = _resolveComponent(\"el-input-number\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[18] || (_cache[18] = _createElementVNode(\"h1\", {\n    \"class\": \"text-2xl font-bold mb-6\",\n    style: {\n      \"color\": \"white\"\n    }\n  }, \"Трекер воды\", -1 /* HOISTED */)), _createCommentVNode(\" Карточка с отслеживанием воды \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_button, {\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $options.changeDate(-1);\n    }),\n    icon: \"el-icon-arrow-left\",\n    circle: \"\"\n  }), _createVNode(_component_el_date_picker, {\n    modelValue: $data.selectedDate,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.selectedDate = $event;\n    }),\n    type: \"date\",\n    format: \"YYYY-MM-DD\",\n    \"value-format\": \"YYYY-MM-DD\",\n    placeholder: \"Выберите дату\",\n    onChange: $options.loadWaterStatus\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createVNode(_component_el_button, {\n    onClick: _cache[2] || (_cache[2] = function ($event) {\n      return $options.changeDate(1);\n    }),\n    icon: \"el-icon-arrow-right\",\n    circle: \"\"\n  })]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_cache[7] || (_cache[7] = _createElementVNode(\"div\", {\n    \"class\": \"stat-label\"\n  }, \"Выпито\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, _toDisplayString($data.waterAmount) + \" мл\", 1 /* TEXT */)]), _cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    \"class\": \"stat-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    \"class\": \"stat-label\"\n  }, \"Норма\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, _toDisplayString($data.waterNorm) + \" мл\", 1 /* TEXT */)]), _cache[11] || (_cache[11] = _createElementVNode(\"div\", {\n    \"class\": \"stat-divider\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    \"class\": \"stat-label\"\n  }, \"Осталось\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_12, _toDisplayString($options.remainingAmount) + \" мл\", 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", {\n    \"class\": \"water-level\",\n    style: _normalizeStyle({\n      height: \"\".concat($data.percentCompleted, \"%\")\n    })\n  }, _cache[12] || (_cache[12] = [_createElementVNode(\"div\", {\n    \"class\": \"water-waves\"\n  }, null, -1 /* HOISTED */)]), 4 /* STYLE */)]), _createElementVNode(\"div\", _hoisted_15, _toDisplayString($data.percentCompleted) + \"%\", 1 /* TEXT */)])])]), _createElementVNode(\"div\", _hoisted_16, [_cache[14] || (_cache[14] = _createElementVNode(\"h3\", {\n    \"class\": \"section-title\"\n  }, \"Добавить воду\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList([100, 200, 300, 500], function (amount) {\n    return _createVNode(_component_el_button, {\n      key: amount,\n      \"class\": \"quick-add-button\",\n      onClick: function onClick($event) {\n        return $options.addWater(amount);\n      }\n    }, {\n      \"default\": _withCtx(function () {\n        return [_createTextVNode(\" +\" + _toDisplayString(amount) + \" мл \", 1 /* TEXT */)];\n      }),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]);\n  }), 64 /* STABLE_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_18, [_createVNode(_component_el_input_number, {\n    modelValue: $data.customAmount,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = function ($event) {\n      return $data.customAmount = $event;\n    }),\n    min: 1,\n    max: 5000,\n    step: 50,\n    placeholder: \"Введите объем\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: _cache[4] || (_cache[4] = function ($event) {\n      return $options.addWater($data.customAmount);\n    })\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[13] || (_cache[13] = [_createTextVNode(\" Добавить воду \")]);\n    }),\n    _: 1 /* STABLE */\n  })])]), _createCommentVNode(\" Секция удаления воды \"), $data.waterAmount > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_cache[16] || (_cache[16] = _createElementVNode(\"h3\", {\n    \"class\": \"section-title\"\n  }, \"Удалить воду\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList([100, 200, 300, 500], function (amount) {\n    return _createVNode(_component_el_button, {\n      key: amount,\n      \"class\": \"quick-remove-button\",\n      onClick: function onClick($event) {\n        return $options.removeWater(amount);\n      },\n      disabled: amount > $data.waterAmount\n    }, {\n      \"default\": _withCtx(function () {\n        return [_createTextVNode(\" -\" + _toDisplayString(amount) + \" мл \", 1 /* TEXT */)];\n      }),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\", \"disabled\"]);\n  }), 64 /* STABLE_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_21, [_createVNode(_component_el_input_number, {\n    modelValue: $data.removeAmount,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n      return $data.removeAmount = $event;\n    }),\n    min: 1,\n    max: $data.waterAmount,\n    step: 50,\n    placeholder: \"Введите объем\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"max\"]), _createVNode(_component_el_button, {\n    type: \"danger\",\n    onClick: _cache[6] || (_cache[6] = function ($event) {\n      return $options.removeWater($data.removeAmount);\n    }),\n    disabled: !$data.removeAmount || $data.removeAmount <= 0\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[15] || (_cache[15] = [_createTextVNode(\" Удалить воду \")]);\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"disabled\"])])])) : _createCommentVNode(\"v-if\", true), $data.waterHistory.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", {\n    \"class\": \"section-title\"\n  }, \"История потребления воды\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_23, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.displayedHistory, function (entry, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      \"class\": _normalizeClass([\"history-bar\", {\n        'current-day': entry.date === $data.selectedDate\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_24, _toDisplayString($options.formatDay(entry.date)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"div\", {\n      \"class\": \"history-bar-fill\",\n      style: _normalizeStyle({\n        height: (entry.percentCompleted || 0) + '%'\n      })\n    }, [entry.percentCompleted > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26)) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */)]), _createElementVNode(\"div\", _hoisted_27, _toDisplayString(Math.round((entry.amount || 0) / 100) / 10) + \"л\", 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]), _cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    \"class\": \"water-tips\"\n  }, [_createElementVNode(\"h3\", {\n    \"class\": \"tips-title\"\n  }, \"Советы для достаточного потребления воды:\"), _createElementVNode(\"ul\", {\n    \"class\": \"tips-list\"\n  }, [_createElementVNode(\"li\", null, \"Начинайте день со стакана воды\"), _createElementVNode(\"li\", null, \"Установите регулярные напоминания\"), _createElementVNode(\"li\", null, \"Носите с собой многоразовую бутылку\"), _createElementVNode(\"li\", null, \"Пейте стакан воды за 30 минут до еды\"), _createElementVNode(\"li\", null, \"Добавляйте в воду ломтики фруктов для вкуса\")])], -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","style","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_el_button","onClick","_cache","$event","$options","changeDate","icon","circle","_component_el_date_picker","modelValue","$data","selectedDate","type","format","placeholder","onChange","loadWaterStatus","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_toDisplayString","waterAmount","_hoisted_9","_hoisted_10","waterNorm","_hoisted_11","_hoisted_12","remainingAmount","_hoisted_13","_hoisted_14","_normalizeStyle","height","concat","percentCompleted","_hoisted_15","_hoisted_16","_hoisted_17","_Fragment","_renderList","amount","addWater","_withCtx","_createTextVNode","_","_hoisted_18","_component_el_input_number","customAmount","min","max","step","_hoisted_19","_hoisted_20","removeWater","disabled","_hoisted_21","removeAmount","waterHistory","length","_hoisted_22","_hoisted_23","displayedHistory","entry","index","_normalizeClass","date","_hoisted_24","formatDay","_hoisted_25","_hoisted_26","_hoisted_27","Math","round"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\WaterTracker.vue"],"sourcesContent":["<template>\n  <div class=\"water-tracker\">\n    <h1 class=\"text-2xl font-bold mb-6\" style=\"color: white;\">Трекер воды</h1>\n    \n    <!-- Карточка с отслеживанием воды -->\n    <div class=\"water-card\">\n      <div class=\"info-section\">\n        <div class=\"date-control\">\n          <el-button @click=\"changeDate(-1)\" icon=\"el-icon-arrow-left\" circle></el-button>\n          <el-date-picker\n            v-model=\"selectedDate\"\n            type=\"date\"\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            placeholder=\"Выберите дату\"\n            @change=\"loadWaterStatus\"\n          ></el-date-picker>\n          <el-button @click=\"changeDate(1)\" icon=\"el-icon-arrow-right\" circle></el-button>\n        </div>\n\n        <div class=\"water-info\">\n          <div class=\"water-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Выпито</div>\n              <div class=\"stat-value\">{{ waterAmount }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Норма</div>\n              <div class=\"stat-value\">{{ waterNorm }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Осталось</div>\n              <div class=\"stat-value\">{{ remainingAmount }} мл</div>\n            </div>\n          </div>\n          \n          <div class=\"water-progress-container\">\n            <div class=\"water-graphic\">\n              <div class=\"water-level\" :style=\"{ height: `${percentCompleted}%` }\">\n                <div class=\"water-waves\"></div>\n              </div>\n            </div>\n            <div class=\"progress-text\">{{ percentCompleted }}%</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"add-water-section\">\n        <h3 class=\"section-title\">Добавить воду</h3>\n        \n        <div class=\"quick-add-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-add-button\"\n            @click=\"addWater(amount)\"\n          >\n            +{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"customAmount\"\n            :min=\"1\"\n            :max=\"5000\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"primary\" @click=\"addWater(customAmount)\">\n            Добавить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <!-- Секция удаления воды -->\n      <div class=\"remove-water-section\" v-if=\"waterAmount > 0\">\n        <h3 class=\"section-title\">Удалить воду</h3>\n        \n        <div class=\"quick-remove-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-remove-button\"\n            @click=\"removeWater(amount)\"\n            :disabled=\"amount > waterAmount\"\n          >\n            -{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"removeAmount\"\n            :min=\"1\"\n            :max=\"waterAmount\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"danger\" @click=\"removeWater(removeAmount)\" :disabled=\"!removeAmount || removeAmount <= 0\">\n            Удалить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <div class=\"water-history-section\" v-if=\"waterHistory.length > 0\">\n        <h3 class=\"section-title\">История потребления воды</h3>\n        <div class=\"history-chart\">\n          <div\n            v-for=\"(entry, index) in displayedHistory\"\n            :key=\"index\"\n            class=\"history-bar\"\n            :class=\"{ 'current-day': entry.date === selectedDate }\"\n          >\n            <div class=\"history-day\">{{ formatDay(entry.date) }}</div>\n            <div class=\"history-bar-container\">\n              <div \n                class=\"history-bar-fill\"\n                :style=\"{\n                  height: (entry.percentCompleted || 0) + '%'\n                }\"\n              >\n                <div class=\"water-waves-small\" v-if=\"entry.percentCompleted > 0\"></div>\n              </div>\n            </div>\n            <div class=\"history-amount\">{{ Math.round((entry.amount || 0) / 100) / 10 }}л</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"water-tips\">\n      <h3 class=\"tips-title\">Советы для достаточного потребления воды:</h3>\n      <ul class=\"tips-list\">\n        <li>Начинайте день со стакана воды</li>\n        <li>Установите регулярные напоминания</li>\n        <li>Носите с собой многоразовую бутылку</li>\n        <li>Пейте стакан воды за 30 минут до еды</li>\n        <li>Добавляйте в воду ломтики фруктов для вкуса</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'WaterTrackerPage',\n  data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0], // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0, // Выпито воды в мл\n      waterNorm: 2000, // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0, // Процент выполнения дневной нормы\n      customAmount: 250, // Пользовательский объем добавляемой воды\n      removeAmount: 100, // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount() {\n      const remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    \n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory() {\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        return this.createEmptyHistory();\n      }\n      \n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Преобразуем даты в объекты записей\n      const result = dates.map(date => {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === this.selectedDate) {\n          return {\n            date: this.selectedDate,\n            amount: this.waterAmount || 0,\n            percentCompleted: this.waterAmount > 0 ? Math.max(this.percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n        \n        // Для других дат ищем записи в истории\n        const historyEntry = this.waterHistory.find(entry => entry.date === date);\n        \n        if (historyEntry) {\n          const amount = historyEntry.amount || 0;\n          let percentCompleted = historyEntry.percentCompleted || 0;\n          \n          // Если процент не указан, но есть количество воды и норма\n          if (!percentCompleted && amount > 0 && historyEntry.norm > 0) {\n            percentCompleted = (amount / historyEntry.norm) * 100;\n          }\n          \n          return {\n            date: historyEntry.date,\n            amount: amount,\n            percentCompleted: amount > 0 ? Math.max(percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n        \n        // Для дат без записей создаем пустые записи с минимальным отображением воды\n        return {\n          date,\n          amount: 0,\n          percentCompleted: 5,\n          isVirtual: true\n        };\n      });\n      \n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory() {\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      return dates.map(date => ({\n        date,\n        amount: date === this.selectedDate ? this.waterAmount : 0,\n        percentCompleted: date === this.selectedDate ? Math.max(this.percentCompleted, 5) : 5, // Минимум 5%\n        isVirtual: true\n      }));\n    }\n  },\n  created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n    \n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    async loadWaterStatus() {\n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n          return;\n        }\n        \n        const response = await axios.get('http://localhost:3000/api/water/status', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { date: this.selectedDate }\n        });\n        \n        this.waterAmount = response.data.amount;\n        this.waterNorm = response.data.norm;\n        this.percentCompleted = response.data.percentCompleted;\n        \n        // Обновляем историю при смене даты\n        await this.loadWaterHistory();\n        \n        // Обновляем текущую запись в истории, если она уже загружена\n        if (this.waterHistory && this.waterHistory.length > 0) {\n          const historyIndex = this.waterHistory.findIndex(item => item.date === this.selectedDate);\n          \n          if (historyIndex >= 0) {\n            // Обновляем существующую запись\n            this.waterHistory[historyIndex] = {\n              date: this.selectedDate,\n              amount: this.waterAmount,\n              norm: this.waterNorm,\n              percentCompleted: this.percentCompleted\n            };\n          } else {\n            // Добавляем новую запись\n            this.waterHistory.push({\n              date: this.selectedDate,\n              amount: this.waterAmount,\n              norm: this.waterNorm,\n              percentCompleted: this.percentCompleted\n            });\n            \n            // Сортируем историю по дате\n            this.waterHistory.sort((a, b) => new Date(a.date) - new Date(b.date));\n          }\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке данных о потреблении воды:', error);\n        ElMessage.error('Не удалось загрузить данные о потреблении воды');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Загрузка истории потребления воды при смене даты и первоначально\n    async loadWaterHistory() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        \n        const response = await axios.get('http://localhost:3000/api/water/history', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Проверяем структуру полученных данных\n        if (!response.data || !response.data.history) {\n          console.error('Неверный формат данных истории:', response.data);\n          return;\n        }\n        \n        const history = response.data.history;\n        \n        // Обрабатываем данные истории и добавляем недостающую информацию\n        const processedHistory = history.map(entry => {\n          // Проверяем и нормализуем ключи объекта\n          const amount = entry.amount || 0;\n          const norm = entry.norm || 2000; // Используем стандартную норму, если не указана\n          \n          // Рассчитываем процент, если он не указан\n          let percentCompleted = entry.percentCompleted;\n          if (!percentCompleted && amount > 0) {\n            percentCompleted = Math.round((amount / norm) * 100);\n          }\n          \n          return {\n            date: entry.date,\n            amount: amount,\n            norm: norm,\n            percentCompleted: percentCompleted || 0\n          };\n        });\n        \n        // Сортируем историю по дате (от ранних к поздним)\n        this.waterHistory = processedHistory.sort((a, b) => {\n          return new Date(a.date) - new Date(b.date);\n        });\n        \n        console.log('Обработанная история потребления воды:', this.waterHistory);\n      } catch (error) {\n        console.error('Ошибка при загрузке истории потребления воды:', error);\n      }\n    },\n    \n    // Добавление записи о выпитой воде\n    async addWater(amount) {\n      if (!amount || amount <= 0) {\n        ElMessage.warning('Укажите корректное количество воды');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n          return;\n        }\n        \n        const response = await axios.post('http://localhost:3000/api/water/track', {\n          amount,\n          date: this.selectedDate\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Добавлено ${amount} мл воды`);\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при добавлении записи о воде:', error);\n        ElMessage.error('Не удалось добавить запись о воде');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Удаление записи о выпитой воде\n    async removeWater(amount) {\n      if (!amount || amount <= 0 || amount > this.waterAmount) {\n        ElMessage.warning('Укажите корректное количество воды для удаления');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n          return;\n        }\n        \n        const response = await axios.delete('http://localhost:3000/api/water/remove', {\n          headers: { Authorization: `Bearer ${token}` },\n          data: {\n            amount,\n            date: this.selectedDate\n          }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Удалено ${amount} мл воды`);\n        \n        // Обновляем историю потребления\n        this.loadWaterHistory();\n      } catch (error) {\n        console.error('Ошибка при удалении записи о воде:', error);\n        if (error.response && error.response.data) {\n          ElMessage.error(error.response.data.message || 'Не удалось удалить запись о воде');\n        } else {\n          ElMessage.error('Не удалось удалить запись о воде');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Изменение выбранной даты\n    async changeDate(days) {\n      const date = new Date(this.selectedDate);\n      date.setDate(date.getDate() + days);\n      this.selectedDate = date.toISOString().split('T')[0];\n      await this.loadWaterStatus();\n    },\n    \n    // Форматирование дня недели для истории потребления\n    formatDay(dateStr) {\n      try {\n        const date = new Date(dateStr);\n        const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        const dayName = days[date.getDay()];\n        const dayNum = date.getDate();\n        \n        return `${dayName} ${dayNum}`;\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.water-tracker {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n/* Основная карточка трекера воды */\n.water-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* Секция с информацией о воде */\n.info-section {\n  margin-bottom: 2rem;\n}\n\n.date-control {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.water-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n}\n\n.water-stats {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 300px;\n}\n\n.stat-item {\n  text-align: center;\n  flex: 1;\n}\n\n.stat-label {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #333;\n}\n\n.stat-divider {\n  width: 1px;\n  background-color: #eee;\n  height: 50px;\n}\n\n.water-progress-container {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 200px;\n}\n\n.water-graphic {\n  width: 120px;\n  height: 200px;\n  border-radius: 60px;\n  border: 2px solid #3498db;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  position: relative;\n  margin-right: 1.5rem;\n}\n\n.water-level {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #3498db;\n  transition: height 0.5s;\n  overflow: hidden;\n}\n\n.water-waves {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  width: 100%;\n  height: 20px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimation 2s infinite linear;\n}\n\n@keyframes waveAnimation {\n  0% { \n    transform: translateX(-50%); \n  }\n  100% { \n    transform: translateX(50%); \n  }\n}\n\n.progress-text {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Секция добавления воды */\n.add-water-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.section-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.quick-add-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-add-button {\n  min-width: 100px;\n}\n\n.custom-amount {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/* История потребления воды */\n.water-history-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.history-chart {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 1rem;\n  height: 200px;\n  margin-top: 1.5rem;\n}\n\n.history-bar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50px;\n}\n\n.history-bar.current-day .history-day {\n  font-weight: bold;\n  color: #333;\n}\n\n.history-day {\n  font-size: 0.8rem;\n  color: #666;\n  margin-bottom: 0.5rem;\n}\n\n.history-bar-container {\n  width: 30px;\n  height: 120px;\n  background-color: #f0f0f0;\n  border-radius: 15px;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  box-sizing: border-box;\n  border: 1px solid #d4e6f1;\n}\n\n.history-bar.current-day .history-bar-container {\n  border: 2px solid #3498db;\n  box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);\n}\n\n.history-bar-fill {\n  position: absolute; \n  bottom: 0;\n  left: 0;\n  width: 100%;\n  background-color: #3498db;\n  transition: height 0.5s;\n  min-height: 1px;\n  overflow: hidden;\n}\n\n.water-waves-small {\n  position: absolute;\n  top: -5px;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimationSmall 2.5s infinite linear;\n  opacity: 0.7;\n}\n\n@keyframes waveAnimationSmall {\n  0% { \n    transform: translateX(-60%); \n  }\n  100% { \n    transform: translateX(60%); \n  }\n}\n\n.history-amount {\n  font-size: 0.8rem;\n  color: #333;\n  margin-top: 0.5rem;\n  font-weight: 500;\n}\n\n.history-bar.current-day .history-amount {\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Советы по потреблению воды */\n.water-tips {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 1.5rem;\n}\n\n.tips-title {\n  color:rgb(2, 78, 16);\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.tips-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 0.5rem;\n  padding-left: 1.5rem;\n}\n\n.tips-list li {\n  color:rgb(2, 78, 16);\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n  .water-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .stat-divider {\n    width: 80%;\n    height: 1px;\n  }\n  \n  .water-info {\n    flex-direction: column;\n  }\n  \n  .water-progress-container {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .water-graphic {\n    margin-right: 0;\n    margin-bottom: 1rem;\n  }\n  \n  .history-chart {\n    overflow-x: auto;\n    padding-bottom: 1rem;\n    justify-content: flex-start;\n  }\n}\n\n/* Стили для кнопок быстрого удаления */\n.quick-remove-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-remove-button {\n  min-width: 100px;\n}\n\n/* Стили для кнопок быстрого удаления (сделать их белыми, как кнопки добавления) */\n.quick-remove-button.el-button {\n  background-color: white;\n  color: #606266;\n  border-color: #DCDFE6;\n}\n\n.quick-remove-button.el-button:hover {\n  color: #409EFF;\n  border-color: #c6e2ff;\n  background-color: #ecf5ff;\n}\n\n.quick-remove-button.el-button:disabled {\n  color: #C0C4CC;\n  cursor: not-allowed;\n  background-color: #FFF;\n  border-color: #EBEEF5;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}