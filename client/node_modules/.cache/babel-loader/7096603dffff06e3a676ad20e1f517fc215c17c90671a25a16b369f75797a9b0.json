{"ast":null,"code":"import _toConsumableArray from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/trpo backup/trpo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'WaterTrackerPage',\n  data: function data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0],\n      // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0,\n      // Выпито воды в мл\n      waterNorm: 2000,\n      // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0,\n      // Процент выполнения дневной нормы\n      customAmount: 250,\n      // Пользовательский объем добавляемой воды\n      removeAmount: 100,\n      // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount: function remainingAmount() {\n      var remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory: function displayedHistory() {\n      var _this = this;\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        return this.createEmptyHistory();\n      }\n\n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i = 1; _i <= 3; _i++) {\n        var _date = new Date(today);\n        _date.setDate(_date.getDate() + _i);\n        dates.push(_date.toISOString().split('T')[0]);\n      }\n\n      // Преобразуем даты в объекты записей\n      var result = dates.map(function (date) {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === _this.selectedDate) {\n          return {\n            date: _this.selectedDate,\n            amount: _this.waterAmount || 0,\n            percentCompleted: _this.waterAmount > 0 ? Math.max(_this.percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n\n        // Для других дат ищем записи в истории\n        var historyEntry = _this.waterHistory.find(function (entry) {\n          return entry.date === date;\n        });\n        if (historyEntry) {\n          var amount = historyEntry.amount || 0;\n          var percentCompleted = historyEntry.percentCompleted || 0;\n\n          // Если процент не указан, но есть количество воды и норма\n          if (!percentCompleted && amount > 0 && historyEntry.norm > 0) {\n            percentCompleted = amount / historyEntry.norm * 100;\n          }\n          return {\n            date: historyEntry.date,\n            amount: amount,\n            percentCompleted: amount > 0 ? Math.max(percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n\n        // Для дат без записей создаем пустые записи с минимальным отображением воды\n        return {\n          date: date,\n          amount: 0,\n          percentCompleted: 5,\n          isVirtual: true\n        };\n      });\n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory: function createEmptyHistory() {\n      var _this2 = this;\n      var dates = [];\n      var today = new Date(this.selectedDate);\n\n      // Добавляем 3 даты до выбранной\n      for (var i = 3; i > 0; i--) {\n        var date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n\n      // Добавляем 3 даты после выбранной\n      for (var _i2 = 1; _i2 <= 3; _i2++) {\n        var _date2 = new Date(today);\n        _date2.setDate(_date2.getDate() + _i2);\n        dates.push(_date2.toISOString().split('T')[0]);\n      }\n      return dates.map(function (date) {\n        return {\n          date: date,\n          amount: date === _this2.selectedDate ? _this2.waterAmount : 0,\n          percentCompleted: date === _this2.selectedDate ? Math.max(_this2.percentCompleted, 5) : 5,\n          // Минимум 5%\n          isVirtual: true\n        };\n      });\n    }\n  },\n  created: function created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n\n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    loadWaterStatus: function loadWaterStatus() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token, response, historyIndex;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this3.loading = true;\n              _context.prev = 1;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context.next = 6;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n              return _context.abrupt(\"return\");\n            case 6:\n              _context.next = 8;\n              return axios.get('http://localhost:3000/api/water/status', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                params: {\n                  date: _this3.selectedDate\n                }\n              });\n            case 8:\n              response = _context.sent;\n              _this3.waterAmount = response.data.amount;\n              _this3.waterNorm = response.data.norm;\n              _this3.percentCompleted = response.data.percentCompleted;\n\n              // Обновляем историю при смене даты\n              _context.next = 14;\n              return _this3.loadWaterHistory();\n            case 14:\n              // Обновляем текущую запись в истории, если она уже загружена\n              if (_this3.waterHistory && _this3.waterHistory.length > 0) {\n                historyIndex = _this3.waterHistory.findIndex(function (item) {\n                  return item.date === _this3.selectedDate;\n                });\n                if (historyIndex >= 0) {\n                  // Обновляем существующую запись\n                  _this3.waterHistory[historyIndex] = {\n                    date: _this3.selectedDate,\n                    amount: _this3.waterAmount,\n                    norm: _this3.waterNorm,\n                    percentCompleted: _this3.percentCompleted\n                  };\n                } else {\n                  // Добавляем новую запись\n                  _this3.waterHistory.push({\n                    date: _this3.selectedDate,\n                    amount: _this3.waterAmount,\n                    norm: _this3.waterNorm,\n                    percentCompleted: _this3.percentCompleted\n                  });\n\n                  // Сортируем историю по дате\n                  _this3.waterHistory.sort(function (a, b) {\n                    return new Date(a.date) - new Date(b.date);\n                  });\n                }\n              }\n              _context.next = 21;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Ошибка при загрузке данных о потреблении воды:', _context.t0);\n              ElMessage.error('Не удалось загрузить данные о потреблении воды');\n            case 21:\n              _context.prev = 21;\n              _this3.loading = false;\n              return _context.finish(21);\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 17, 21, 24]]);\n      }))();\n    },\n    // Загрузка истории потребления воды при смене даты и первоначально\n    loadWaterHistory: function loadWaterHistory() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var token, response, history, processedHistory;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 4:\n              _context2.next = 6;\n              return axios.get('http://localhost:3000/api/water/history', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 6:\n              response = _context2.sent;\n              if (!(!response.data || !response.data.history)) {\n                _context2.next = 10;\n                break;\n              }\n              console.error('Неверный формат данных истории:', response.data);\n              return _context2.abrupt(\"return\");\n            case 10:\n              history = response.data.history; // Проверяем, что история - это массив\n              if (Array.isArray(history)) {\n                _context2.next = 14;\n                break;\n              }\n              console.error('История должна быть массивом:', history);\n              return _context2.abrupt(\"return\");\n            case 14:\n              // Обрабатываем данные истории и добавляем недостающую информацию\n              processedHistory = history.map(function (entry) {\n                // Проверяем обязательное наличие даты\n                if (!entry || !entry.date) {\n                  console.error('Запись истории без даты:', entry);\n                  return null;\n                }\n\n                // Проверяем и нормализуем ключи объекта\n                var amount = typeof entry.amount === 'number' ? entry.amount : 0;\n                var norm = typeof entry.norm === 'number' ? entry.norm : 2000;\n\n                // Рассчитываем процент, если он не указан\n                var percentCompleted = entry.percentCompleted;\n                if ((!percentCompleted || typeof percentCompleted !== 'number') && amount > 0) {\n                  percentCompleted = Math.round(amount / norm * 100);\n                }\n                return {\n                  date: entry.date,\n                  amount: amount,\n                  norm: norm,\n                  percentCompleted: percentCompleted || 0\n                };\n              }).filter(function (entry) {\n                return entry !== null;\n              }); // Удаляем некорректные записи\n              // Сортируем историю по дате (от ранних к поздним)\n              _this4.waterHistory = processedHistory.sort(function (a, b) {\n                return new Date(a.date) - new Date(b.date);\n              });\n              console.log('Обработанная история потребления воды:', _this4.waterHistory);\n              _context2.next = 23;\n              break;\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Ошибка при загрузке истории потребления воды:', _context2.t0);\n              _this4.waterHistory = []; // Устанавливаем пустой массив в случае ошибки\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 19]]);\n      }))();\n    },\n    // Добавление записи о выпитой воде\n    addWater: function addWater(amount) {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!amount || amount <= 0)) {\n                _context3.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды');\n              return _context3.abrupt(\"return\");\n            case 3:\n              _this5.loading = true;\n              _context3.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context3.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n              return _context3.abrupt(\"return\");\n            case 9:\n              _context3.next = 11;\n              return axios.post('http://localhost:3000/api/water/track', {\n                amount: amount,\n                date: _this5.selectedDate\n              }, {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                }\n              });\n            case 11:\n              response = _context3.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this5.waterAmount = waterData.amount;\n              _this5.waterNorm = waterData.norm;\n              _this5.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Обновляем текущую запись в истории\n              _this5.updateHistoryEntry();\n              _context3.next = 24;\n              break;\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](4);\n              console.error('Ошибка при добавлении записи о воде:', _context3.t0);\n              ElMessage.error('Не удалось добавить запись о воде');\n            case 24:\n              _context3.prev = 24;\n              _this5.loading = false;\n              return _context3.finish(24);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[4, 20, 24, 27]]);\n      }))();\n    },\n    // Удаление записи о выпитой воде\n    removeWater: function removeWater(amount) {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var token, response, waterData;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!amount || amount <= 0 || amount > _this6.waterAmount)) {\n                _context4.next = 3;\n                break;\n              }\n              ElMessage.warning('Укажите корректное количество воды для удаления');\n              return _context4.abrupt(\"return\");\n            case 3:\n              _this6.loading = true;\n              _context4.prev = 4;\n              token = localStorage.getItem('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n              return _context4.abrupt(\"return\");\n            case 9:\n              _context4.next = 11;\n              return axios[\"delete\"]('http://localhost:3000/api/water/remove', {\n                headers: {\n                  Authorization: \"Bearer \".concat(token)\n                },\n                data: {\n                  amount: amount,\n                  date: _this6.selectedDate\n                }\n              });\n            case 11:\n              response = _context4.sent;\n              // Обновляем данные из ответа\n              waterData = response.data.water;\n              _this6.waterAmount = waterData.amount;\n              _this6.waterNorm = waterData.norm;\n              _this6.percentCompleted = waterData.percentCompleted;\n\n              // Показываем сообщение об успехе\n              ElMessage.success(\"\\u0423\\u0434\\u0430\\u043B\\u0435\\u043D\\u043E \".concat(amount, \" \\u043C\\u043B \\u0432\\u043E\\u0434\\u044B\"));\n\n              // Обновляем текущую запись в истории\n              _this6.updateHistoryEntry();\n              _context4.next = 24;\n              break;\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](4);\n              console.error('Ошибка при удалении записи о воде:', _context4.t0);\n              if (_context4.t0.response && _context4.t0.response.data) {\n                ElMessage.error(_context4.t0.response.data.message || 'Не удалось удалить запись о воде');\n              } else {\n                ElMessage.error('Не удалось удалить запись о воде');\n              }\n            case 24:\n              _context4.prev = 24;\n              _this6.loading = false;\n              return _context4.finish(24);\n            case 27:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 20, 24, 27]]);\n      }))();\n    },\n    // Вспомогательный метод для обновления текущей записи в истории\n    updateHistoryEntry: function updateHistoryEntry() {\n      var _this7 = this;\n      if (!this.waterHistory) return;\n      var historyIndex = this.waterHistory.findIndex(function (item) {\n        return item.date === _this7.selectedDate;\n      });\n      if (historyIndex >= 0) {\n        // Обновляем существующую запись\n        this.waterHistory[historyIndex] = {\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          norm: this.waterNorm,\n          percentCompleted: this.percentCompleted\n        };\n\n        // Создаем новый массив для реактивности\n        this.waterHistory = _toConsumableArray(this.waterHistory);\n      } else {\n        // Добавляем новую запись\n        this.waterHistory.push({\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          norm: this.waterNorm,\n          percentCompleted: this.percentCompleted\n        });\n\n        // Сортируем историю по дате\n        this.waterHistory.sort(function (a, b) {\n          return new Date(a.date) - new Date(b.date);\n        });\n      }\n    },\n    // Изменение выбранной даты\n    changeDate: function changeDate(days) {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var date;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              date = new Date(_this8.selectedDate);\n              date.setDate(date.getDate() + days);\n              _this8.selectedDate = date.toISOString().split('T')[0];\n              _context5.next = 5;\n              return _this8.loadWaterStatus();\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }))();\n    },\n    // Форматирование дня недели для истории потребления\n    formatDay: function formatDay(dateStr) {\n      try {\n        var date = new Date(dateStr);\n        var days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        var dayName = days[date.getDay()];\n        var dayNum = date.getDate();\n        return \"\".concat(dayName, \" \").concat(dayNum);\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","name","data","selectedDate","Date","toISOString","split","waterAmount","waterNorm","percentCompleted","customAmount","removeAmount","loading","waterHistory","computed","remainingAmount","remaining","displayedHistory","_this","length","createEmptyHistory","dates","today","i","date","setDate","getDate","push","result","map","amount","Math","max","isVirtual","historyEntry","find","entry","norm","_this2","created","loadWaterStatus","loadWaterHistory","methods","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","response","historyIndex","wrap","_callee$","_context","prev","next","localStorage","getItem","warning","abrupt","get","headers","Authorization","concat","params","sent","findIndex","item","sort","a","b","t0","console","error","finish","stop","_this4","_callee2","history","processedHistory","_callee2$","_context2","Array","isArray","round","filter","log","addWater","_this5","_callee3","waterData","_callee3$","_context3","post","water","success","updateHistoryEntry","removeWater","_this6","_callee4","_callee4$","_context4","message","_this7","_toConsumableArray","changeDate","days","_this8","_callee5","_callee5$","_context5","formatDay","dateStr","dayName","getDay","dayNum","e"],"sources":["D:\\trpo backup\\trpo\\client\\src\\views\\WaterTracker.vue"],"sourcesContent":["<template>\n  <div class=\"water-tracker\">\n    <h1 class=\"text-2xl font-bold mb-6\" style=\"color: white;\">Трекер воды</h1>\n    \n    <!-- Карточка с отслеживанием воды -->\n    <div class=\"water-card\">\n      <div class=\"info-section\">\n        <div class=\"date-control\">\n          <el-button @click=\"changeDate(-1)\" icon=\"el-icon-arrow-left\" circle></el-button>\n          <el-date-picker\n            v-model=\"selectedDate\"\n            type=\"date\"\n            format=\"YYYY-MM-DD\"\n            value-format=\"YYYY-MM-DD\"\n            placeholder=\"Выберите дату\"\n            @change=\"loadWaterStatus\"\n          ></el-date-picker>\n          <el-button @click=\"changeDate(1)\" icon=\"el-icon-arrow-right\" circle></el-button>\n        </div>\n\n        <div class=\"water-info\">\n          <div class=\"water-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Выпито</div>\n              <div class=\"stat-value\">{{ waterAmount }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Норма</div>\n              <div class=\"stat-value\">{{ waterNorm }} мл</div>\n            </div>\n            <div class=\"stat-divider\"></div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">Осталось</div>\n              <div class=\"stat-value\">{{ remainingAmount }} мл</div>\n            </div>\n          </div>\n          \n          <div class=\"water-progress-container\">\n            <div class=\"water-graphic\">\n              <div class=\"water-level\" :style=\"{ height: `${percentCompleted}%` }\">\n                <div class=\"water-waves\"></div>\n              </div>\n            </div>\n            <div class=\"progress-text\">{{ percentCompleted }}%</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"add-water-section\">\n        <h3 class=\"section-title\">Добавить воду</h3>\n        \n        <div class=\"quick-add-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-add-button\"\n            @click=\"addWater(amount)\"\n          >\n            +{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"customAmount\"\n            :min=\"1\"\n            :max=\"5000\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"primary\" @click=\"addWater(customAmount)\">\n            Добавить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <!-- Секция удаления воды -->\n      <div class=\"remove-water-section\" v-if=\"waterAmount > 0\">\n        <h3 class=\"section-title\">Удалить воду</h3>\n        \n        <div class=\"quick-remove-buttons\">\n          <el-button \n            v-for=\"amount in [100, 200, 300, 500]\" \n            :key=\"amount\"\n            class=\"quick-remove-button\"\n            @click=\"removeWater(amount)\"\n            :disabled=\"amount > waterAmount\"\n          >\n            -{{ amount }} мл\n          </el-button>\n        </div>\n        \n        <div class=\"custom-amount\">\n          <el-input-number\n            v-model=\"removeAmount\"\n            :min=\"1\"\n            :max=\"waterAmount\"\n            :step=\"50\"\n            placeholder=\"Введите объем\"\n          />\n          <el-button type=\"danger\" @click=\"removeWater(removeAmount)\" :disabled=\"!removeAmount || removeAmount <= 0\">\n            Удалить воду\n          </el-button>\n        </div>\n      </div>\n      \n      <div class=\"water-history-section\" v-if=\"waterHistory.length > 0\">\n        <h3 class=\"section-title\">История потребления воды</h3>\n        <div class=\"history-chart\">\n          <div\n            v-for=\"(entry, index) in displayedHistory\"\n            :key=\"index\"\n            class=\"history-bar\"\n            :class=\"{ 'current-day': entry.date === selectedDate }\"\n          >\n            <div class=\"history-day\">{{ formatDay(entry.date) }}</div>\n            <div class=\"history-bar-container\">\n              <div \n                class=\"history-bar-fill\"\n                :style=\"{\n                  height: `${entry.percentCompleted || 5}%`\n                }\"\n              >\n                <div class=\"water-waves-small\" v-if=\"entry.amount > 0\"></div>\n              </div>\n            </div>\n            <div class=\"history-amount\">{{ Math.round((entry.amount || 0) / 100) / 10 }}л</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"water-tips\">\n      <h3 class=\"tips-title\">Советы для достаточного потребления воды:</h3>\n      <ul class=\"tips-list\">\n        <li>Начинайте день со стакана воды</li>\n        <li>Установите регулярные напоминания</li>\n        <li>Носите с собой многоразовую бутылку</li>\n        <li>Пейте стакан воды за 30 минут до еды</li>\n        <li>Добавляйте в воду ломтики фруктов для вкуса</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\nexport default {\n  name: 'WaterTrackerPage',\n  data() {\n    return {\n      selectedDate: new Date().toISOString().split('T')[0], // Текущая дата в формате YYYY-MM-DD\n      waterAmount: 0, // Выпито воды в мл\n      waterNorm: 2000, // Норма воды в мл (будет рассчитана динамически)\n      percentCompleted: 0, // Процент выполнения дневной нормы\n      customAmount: 250, // Пользовательский объем добавляемой воды\n      removeAmount: 100, // Пользовательский объем удаляемой воды\n      loading: false,\n      waterHistory: [] // История потребления воды\n    };\n  },\n  computed: {\n    remainingAmount() {\n      const remaining = this.waterNorm - this.waterAmount;\n      return remaining > 0 ? remaining : 0;\n    },\n    \n    // Вычисляемое свойство для отображения истории с выбранной датой по центру\n    displayedHistory() {\n      if (!this.waterHistory || this.waterHistory.length === 0) {\n        return this.createEmptyHistory();\n      }\n      \n      // Создаем массив дат для отображения (3 до, 1 текущая, 3 после)\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Преобразуем даты в объекты записей\n      const result = dates.map(date => {\n        // Для текущей даты используем актуальные значения из состояния компонента\n        if (date === this.selectedDate) {\n          return {\n            date: this.selectedDate,\n            amount: this.waterAmount || 0,\n            percentCompleted: this.waterAmount > 0 ? Math.max(this.percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n        \n        // Для других дат ищем записи в истории\n        const historyEntry = this.waterHistory.find(entry => entry.date === date);\n        \n        if (historyEntry) {\n          const amount = historyEntry.amount || 0;\n          let percentCompleted = historyEntry.percentCompleted || 0;\n          \n          // Если процент не указан, но есть количество воды и норма\n          if (!percentCompleted && amount > 0 && historyEntry.norm > 0) {\n            percentCompleted = (amount / historyEntry.norm) * 100;\n          }\n          \n          return {\n            date: historyEntry.date,\n            amount: amount,\n            percentCompleted: amount > 0 ? Math.max(percentCompleted, 5) : 5,\n            isVirtual: false\n          };\n        }\n        \n        // Для дат без записей создаем пустые записи с минимальным отображением воды\n        return {\n          date,\n          amount: 0,\n          percentCompleted: 5,\n          isVirtual: true\n        };\n      });\n      \n      return result;\n    },\n    // Добавим метод для создания пустой истории\n    createEmptyHistory() {\n      const dates = [];\n      const today = new Date(this.selectedDate);\n      \n      // Добавляем 3 даты до выбранной\n      for (let i = 3; i > 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      // Добавляем выбранную дату\n      dates.push(this.selectedDate);\n      \n      // Добавляем 3 даты после выбранной\n      for (let i = 1; i <= 3; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        dates.push(date.toISOString().split('T')[0]);\n      }\n      \n      return dates.map(date => ({\n        date,\n        amount: date === this.selectedDate ? this.waterAmount : 0,\n        percentCompleted: date === this.selectedDate ? Math.max(this.percentCompleted, 5) : 5, // Минимум 5%\n        isVirtual: true\n      }));\n    }\n  },\n  created() {\n    // Загружаем данные о воде при создании компонента\n    this.loadWaterStatus();\n    \n    // Загружаем историю потребления воды\n    this.loadWaterHistory();\n  },\n  methods: {\n    // Загрузка статуса потребления воды за выбранную дату\n    async loadWaterStatus() {\n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для доступа к трекеру воды');\n          return;\n        }\n        \n        const response = await axios.get('http://localhost:3000/api/water/status', {\n          headers: { Authorization: `Bearer ${token}` },\n          params: { date: this.selectedDate }\n        });\n        \n        this.waterAmount = response.data.amount;\n        this.waterNorm = response.data.norm;\n        this.percentCompleted = response.data.percentCompleted;\n        \n        // Обновляем историю при смене даты\n        await this.loadWaterHistory();\n        \n        // Обновляем текущую запись в истории, если она уже загружена\n        if (this.waterHistory && this.waterHistory.length > 0) {\n          const historyIndex = this.waterHistory.findIndex(item => item.date === this.selectedDate);\n          \n          if (historyIndex >= 0) {\n            // Обновляем существующую запись\n            this.waterHistory[historyIndex] = {\n              date: this.selectedDate,\n              amount: this.waterAmount,\n              norm: this.waterNorm,\n              percentCompleted: this.percentCompleted\n            };\n          } else {\n            // Добавляем новую запись\n            this.waterHistory.push({\n              date: this.selectedDate,\n              amount: this.waterAmount,\n              norm: this.waterNorm,\n              percentCompleted: this.percentCompleted\n            });\n            \n            // Сортируем историю по дате\n            this.waterHistory.sort((a, b) => new Date(a.date) - new Date(b.date));\n          }\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке данных о потреблении воды:', error);\n        ElMessage.error('Не удалось загрузить данные о потреблении воды');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Загрузка истории потребления воды при смене даты и первоначально\n    async loadWaterHistory() {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        \n        const response = await axios.get('http://localhost:3000/api/water/history', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Проверяем структуру полученных данных\n        if (!response.data || !response.data.history) {\n          console.error('Неверный формат данных истории:', response.data);\n          return;\n        }\n        \n        const history = response.data.history;\n        \n        // Проверяем, что история - это массив\n        if (!Array.isArray(history)) {\n          console.error('История должна быть массивом:', history);\n          return;\n        }\n        \n        // Обрабатываем данные истории и добавляем недостающую информацию\n        const processedHistory = history.map(entry => {\n          // Проверяем обязательное наличие даты\n          if (!entry || !entry.date) {\n            console.error('Запись истории без даты:', entry);\n            return null;\n          }\n          \n          // Проверяем и нормализуем ключи объекта\n          const amount = typeof entry.amount === 'number' ? entry.amount : 0;\n          const norm = typeof entry.norm === 'number' ? entry.norm : 2000;\n          \n          // Рассчитываем процент, если он не указан\n          let percentCompleted = entry.percentCompleted;\n          if ((!percentCompleted || typeof percentCompleted !== 'number') && amount > 0) {\n            percentCompleted = Math.round((amount / norm) * 100);\n          }\n          \n          return {\n            date: entry.date,\n            amount: amount,\n            norm: norm,\n            percentCompleted: percentCompleted || 0\n          };\n        }).filter(entry => entry !== null); // Удаляем некорректные записи\n        \n        // Сортируем историю по дате (от ранних к поздним)\n        this.waterHistory = processedHistory.sort((a, b) => {\n          return new Date(a.date) - new Date(b.date);\n        });\n        \n        console.log('Обработанная история потребления воды:', this.waterHistory);\n      } catch (error) {\n        console.error('Ошибка при загрузке истории потребления воды:', error);\n        this.waterHistory = []; // Устанавливаем пустой массив в случае ошибки\n      }\n    },\n    \n    // Добавление записи о выпитой воде\n    async addWater(amount) {\n      if (!amount || amount <= 0) {\n        ElMessage.warning('Укажите корректное количество воды');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для добавления записи о воде');\n          return;\n        }\n        \n        const response = await axios.post('http://localhost:3000/api/water/track', {\n          amount,\n          date: this.selectedDate\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Добавлено ${amount} мл воды`);\n        \n        // Обновляем текущую запись в истории\n        this.updateHistoryEntry();\n      } catch (error) {\n        console.error('Ошибка при добавлении записи о воде:', error);\n        ElMessage.error('Не удалось добавить запись о воде');\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Удаление записи о выпитой воде\n    async removeWater(amount) {\n      if (!amount || amount <= 0 || amount > this.waterAmount) {\n        ElMessage.warning('Укажите корректное количество воды для удаления');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          ElMessage.warning('Необходимо авторизоваться для удаления записи о воде');\n          return;\n        }\n        \n        const response = await axios.delete('http://localhost:3000/api/water/remove', {\n          headers: { Authorization: `Bearer ${token}` },\n          data: {\n            amount,\n            date: this.selectedDate\n          }\n        });\n        \n        // Обновляем данные из ответа\n        const waterData = response.data.water;\n        this.waterAmount = waterData.amount;\n        this.waterNorm = waterData.norm;\n        this.percentCompleted = waterData.percentCompleted;\n        \n        // Показываем сообщение об успехе\n        ElMessage.success(`Удалено ${amount} мл воды`);\n        \n        // Обновляем текущую запись в истории\n        this.updateHistoryEntry();\n      } catch (error) {\n        console.error('Ошибка при удалении записи о воде:', error);\n        if (error.response && error.response.data) {\n          ElMessage.error(error.response.data.message || 'Не удалось удалить запись о воде');\n        } else {\n          ElMessage.error('Не удалось удалить запись о воде');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Вспомогательный метод для обновления текущей записи в истории\n    updateHistoryEntry() {\n      if (!this.waterHistory) return;\n      \n      const historyIndex = this.waterHistory.findIndex(item => item.date === this.selectedDate);\n      \n      if (historyIndex >= 0) {\n        // Обновляем существующую запись\n        this.waterHistory[historyIndex] = {\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          norm: this.waterNorm,\n          percentCompleted: this.percentCompleted\n        };\n        \n        // Создаем новый массив для реактивности\n        this.waterHistory = [...this.waterHistory];\n      } else {\n        // Добавляем новую запись\n        this.waterHistory.push({\n          date: this.selectedDate,\n          amount: this.waterAmount,\n          norm: this.waterNorm,\n          percentCompleted: this.percentCompleted\n        });\n        \n        // Сортируем историю по дате\n        this.waterHistory.sort((a, b) => new Date(a.date) - new Date(b.date));\n      }\n    },\n    \n    // Изменение выбранной даты\n    async changeDate(days) {\n      const date = new Date(this.selectedDate);\n      date.setDate(date.getDate() + days);\n      this.selectedDate = date.toISOString().split('T')[0];\n      await this.loadWaterStatus();\n    },\n    \n    // Форматирование дня недели для истории потребления\n    formatDay(dateStr) {\n      try {\n        const date = new Date(dateStr);\n        const days = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n        const dayName = days[date.getDay()];\n        const dayNum = date.getDate();\n        \n        return `${dayName} ${dayNum}`;\n      } catch (e) {\n        console.error('Ошибка форматирования даты:', e);\n        return dateStr;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.water-tracker {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n/* Основная карточка трекера воды */\n.water-card {\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* Секция с информацией о воде */\n.info-section {\n  margin-bottom: 2rem;\n}\n\n.date-control {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.water-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n}\n\n.water-stats {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 300px;\n}\n\n.stat-item {\n  text-align: center;\n  flex: 1;\n}\n\n.stat-label {\n  color: #666;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n}\n\n.stat-value {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #333;\n}\n\n.stat-divider {\n  width: 1px;\n  background-color: #eee;\n  height: 50px;\n}\n\n.water-progress-container {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 200px;\n}\n\n.water-graphic {\n  width: 120px;\n  height: 200px;\n  border-radius: 60px;\n  border: 2px solid #3498db;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  position: relative;\n  margin-right: 1.5rem;\n}\n\n.water-level {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #3498db;\n  transition: height 0.5s;\n  overflow: hidden;\n}\n\n.water-waves {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  width: 100%;\n  height: 20px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimation 2s infinite linear;\n}\n\n@keyframes waveAnimation {\n  0% { \n    transform: translateX(-50%); \n  }\n  100% { \n    transform: translateX(50%); \n  }\n}\n\n.progress-text {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Секция добавления воды */\n.add-water-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.section-title {\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.quick-add-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-add-button {\n  min-width: 100px;\n}\n\n.custom-amount {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n/* История потребления воды */\n.water-history-section {\n  padding-top: 1.5rem;\n  border-top: 1px solid #eee;\n  margin-bottom: 1.5rem;\n}\n\n.history-chart {\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 1rem;\n  height: 200px;\n  margin-top: 1.5rem;\n}\n\n.history-bar {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50px;\n}\n\n.history-bar.current-day .history-day {\n  font-weight: bold;\n  color: #333;\n}\n\n.history-day {\n  font-size: 0.8rem;\n  color: #666;\n  margin-bottom: 0.5rem;\n}\n\n.history-bar-container {\n  width: 30px;\n  height: 120px;\n  background-color: #f0f0f0;\n  border-radius: 15px;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  box-sizing: border-box;\n  border: 1px solid #d4e6f1;\n}\n\n.history-bar.current-day .history-bar-container {\n  border: 2px solid #3498db;\n  box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);\n}\n\n.history-bar-fill {\n  position: absolute; \n  bottom: 0;\n  left: 0;\n  width: 100%;\n  background-color: #3498db;\n  transition: height 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  min-height: 1px;\n  overflow: hidden;\n  border-radius: 0 0 15px 15px;\n}\n\n.water-waves-small {\n  position: absolute;\n  top: -5px;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  background: linear-gradient(\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent \n  );\n  animation: waveAnimationSmall 2.5s infinite ease-in-out;\n  opacity: 0.7;\n}\n\n@keyframes waveAnimationSmall {\n  0% { \n    transform: translateX(-60%); \n  }\n  50% {\n    transform: translateX(0%);\n  }\n  100% { \n    transform: translateX(60%); \n  }\n}\n\n.history-amount {\n  font-size: 0.8rem;\n  color: #333;\n  margin-top: 0.5rem;\n  font-weight: 500;\n}\n\n.history-bar.current-day .history-amount {\n  font-weight: bold;\n  color: #3498db;\n}\n\n/* Советы по потреблению воды */\n.water-tips {\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 1.5rem;\n}\n\n.tips-title {\n  color:rgb(2, 78, 16);\n  font-size: 1.1rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.tips-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 0.5rem;\n  padding-left: 1.5rem;\n}\n\n.tips-list li {\n  color:rgb(2, 78, 16);\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n  .water-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .stat-divider {\n    width: 80%;\n    height: 1px;\n  }\n  \n  .water-info {\n    flex-direction: column;\n  }\n  \n  .water-progress-container {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .water-graphic {\n    margin-right: 0;\n    margin-bottom: 1rem;\n  }\n  \n  .history-chart {\n    overflow-x: auto;\n    padding-bottom: 1rem;\n    justify-content: flex-start;\n  }\n}\n\n/* Стили для кнопок быстрого удаления */\n.quick-remove-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.quick-remove-button {\n  min-width: 100px;\n}\n\n/* Стили для кнопок быстрого удаления (сделать их белыми, как кнопки добавления) */\n.quick-remove-button.el-button {\n  background-color: white;\n  color: #606266;\n  border-color: #DCDFE6;\n}\n\n.quick-remove-button.el-button:hover {\n  color: #409EFF;\n  border-color: #c6e2ff;\n  background-color: #ecf5ff;\n}\n\n.quick-remove-button.el-button:disabled {\n  color: #C0C4CC;\n  cursor: not-allowed;\n  background-color: #FFF;\n  border-color: #EBEEF5;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}